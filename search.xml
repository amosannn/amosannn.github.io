<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello Hexo</title>
    <url>/blog/2017/04/16/Hello-Hexo/</url>
    <content><![CDATA[<p>阿盛的技术博客诞生。</p>
]]></content>
  </entry>
  <entry>
    <title>Hive 优化之为外部表创建分区</title>
    <url>/blog/2018/10/26/add-partition-after-creating-external-table-in-hive/</url>
    <content><![CDATA[<p>首先，我们有一个数据量很大的表。其次，对他进行条件查询或其他操作就像看着一只小蜗牛在爬。</p>
<p>是可忍，孰不可忍！</p>
<h2 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h2><p>关于分区为什么能提升查询速度，这就值得你仔细想想了。</p>
<p>既然 <code>hive</code> 基于文件系统，那么我们可以把它类比成很多个桶。</p>
<p>假设现在有 100 个桶，分别存放不同的海鲜，其中 2 个桶里有我们想要的桂花鱼，1 个桶里有阿根廷大红虾，那如何才能在最快的速度找出这 3 个桶？</p>
<p>按照默认的策略，人们会打开盖子一桶一桶找，而如果有 1000、10000 个桶，就会从一个人找演变成一群人一起找。</p>
<p>有没有改进方式呢？有。</p>
<p>有一天老板发现，不对啊，这个事我居然叫那么多人来做，感觉自己额外付出了很多成本，亏钱了。不行！这个事情必须改革！于是他思前想后好几天怎么也也想不到更好的办法，也因此懊恼了许久。直到有一天，老板夫人得了风寒，老板十分心急，替夫人去药铺抓药，当它看见郎中拿着方子在药柜抓药的时候，心中的郁结终于揭开了。拍了拍脑瓜子，大叫了声，对呀！我怎么没想到呢！</p>
<p>于是，从药铺回来后，老板更改了新的存鱼策略。它让员工们把鱼放进桶里的同时，在桶外贴上标签，取鱼的时候只需要远远地扫一眼就能快速定位。</p>
<p><code>hive</code> 也是如此，你可以粗略地将它的存储系统理解为，将一堆文件放在同一个文件夹里，需要的时候在这堆文件里遍历，最后的效果不言而喻。</p>
<p>分区的好处便是，将文件按一定的维度，存进不同的文件夹，相当于给他们打好了标签，这样我按这个维度搜索时，便不需要遍历其他无关的文件。数据越多，对查询效率的提升就越大。</p>
<h2 id="0x02-操作一波"><a href="#0x02-操作一波" class="headerlink" title="0x02 操作一波"></a>0x02 操作一波</h2><p>首先看分区列表，如果结果为空就表示该表下没有分区。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> partitions tmp.tmp_user;</span><br></pre></td></tr></table></figure>



<p>给当前表添加分区</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tmp.tmp_user <span class="keyword">add</span> <span class="keyword">partition</span> (<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;2018_10&#x27;</span>, <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;25&#x27;</span>) location <span class="string">&#x27;/user/amos/tmp_user/month=2018_10/day=25&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>将数据迁移至分区中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hdfs dfs -mv /user/amos/tmp_user/data_20181025.csv /user/amos/tmp_user/month=2018_10/day=25</span></span><br></pre></td></tr></table></figure>





<h2 id="物极必反"><a href="#物极必反" class="headerlink" title="物极必反"></a>物极必反</h2><p>为了提升搜索效果，增加分区数是可以的，但是如果分区数太过庞大，而需查询的数据也很多的话，分区带来的提升会被弱化。尤其是在分区中数据较为分散的时候，只要查询数据量达到一定量级便会轻易集中所有分区。</p>
<p>大量分区带来的不良后果不仅如此，还会在查询之后给磁盘带来更多的小文件。</p>
<h2 id="说点题外话"><a href="#说点题外话" class="headerlink" title="说点题外话"></a>说点题外话</h2><p>如果是对数据仓库进行优化</p>
<p>在 <code>hive</code> 中，有几种办法</p>
<ul>
<li>分区</li>
<li>分桶</li>
<li>索引</li>
<li>区分活跃用户</li>
<li>更改数据结构（id - string –&gt; id - list<string>)</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>在SelectProvider注解中使用复杂类型参数（List）</title>
    <url>/blog/2018/03/03/SelectProvider-use-List-parameter/</url>
    <content><![CDATA[<p>最近开发中尝试使用注解来代替xml完成Mybatis的sql编写，实现更完(装)整(逼)的无xml编程。结果没写多久就跌进大坑了Orz</p>
<p>总所周知的是Mybatis支持的注解中有@Select、@Insert、@Update、@Delete这四个基本操作。使用这些注解你可以非常快的完成基础操作，如果想执行一些复杂操作，例如包含where、foreach等xml中一个标签即可完成的操作，便需要用到另一个注解 –&gt; @SelectProvider</p>
<p>如果你的需求只是传递一些基础类型，那你学习使用SelectProvider的曲线还是很平滑的。如果你的需求是传递一些复杂类型，例如List，那就可能会尴尬了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuestionMapper</span> </span>&#123;</span><br><span class="line">  <span class="meta">@SelectProvider(type = QuestionSqlProvider.class, method = &quot;listQuestionByQuestionId&quot;)</span></span><br><span class="line">  <span class="function">List&lt;Question&gt; <span class="title">listQuestionByQuestionId</span><span class="params">(<span class="meta">@Param(&quot;idList&quot;)</span> List&lt;Integer&gt; idList)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一开始我理所当然的把List<Integer>作为输入参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listQuestionByQuestionId</span><span class="params">(<span class="keyword">final</span> List&lt;Integer&gt; idList)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Integer questionId : idList) &#123;</span><br><span class="line">      sb.append(<span class="string">&quot; &#x27;&quot;</span> + questionId + <span class="string">&quot;&#x27;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">      SELECT(<span class="string">&quot; question_id,question_title,create_time &quot;</span>);</span><br><span class="line">      FROM(<span class="string">&quot; question &quot;</span>);</span><br><span class="line">      WHERE(<span class="string">&quot; question_id in &quot;</span> + sb.toString());</span><br><span class="line">    &#125;&#125;.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>燃鹅。。jvm很无情的抛了个错误出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00:29:39.814 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Could not complete request</span><br><span class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error invoking SqlProvider method (com.amosannn.mapper.QuestionSqlProvider.listQuestionByQuestionId).  Cause: org.apache.ibatis.binding.BindingException: Parameter &#x27;arg0&#x27; not found. Available parameters are [idList, param1]</span><br></pre></td></tr></table></figure>
<p>很难受，Mybatis的官方文档里并没有针对@SelectProvider有更多的demo，翻遍了各大门户网站也没见到有相关的讨论。兜兜转转依旧没有眉目，想到多参数的传递会被Mybatis自动封装进Map，该不会List也是同样被封装进Map吧。结果一试还真是这样。。</p>
<p>终于摸索出问题的关键，只需把形参由List<Integer>类型替换为Map类型就能接收到前面传来的List了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuestionSqlProvider</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">listQuestionByQuestionId</span><span class="params">(<span class="keyword">final</span> Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; idList = (List&lt;Integer&gt;)map.get(<span class="string">&quot;idList&quot;</span>);</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Integer questionId : idList) &#123;</span><br><span class="line">      sb.append(<span class="string">&quot; &#x27;&quot;</span> + questionId + <span class="string">&quot;&#x27;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">      SELECT(<span class="string">&quot; question_id,question_title,create_time &quot;</span>);</span><br><span class="line">      FROM(<span class="string">&quot; question &quot;</span>);</span><br><span class="line">      WHERE(<span class="string">&quot; question_id in &quot;</span> + sb.toString());</span><br><span class="line">    &#125;&#125;.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Airflow 概念梳理</title>
    <url>/blog/2018/10/30/airflow-concept-combing/</url>
    <content><![CDATA[<h1 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h1><p>Airflow 基于一个重要的数据结构，DAG。</p>
<p>为什么依赖 DAG？</p>
<p>LInux 与 WIndows 的 crontab 与任务计划，只可以配置定时任务或间隔任务，无法配置作业间的依赖关系。</p>
<p>一个很大的弊端是，如果我们需要在作业 A 执行之后才有供作业 B 执行的数据，而出现了不可因素导致轮到作业 B 执行的时候作业 A 还未执行完毕。这必定会导致数据缺失，或作业 B 执行失败。</p>
<p>所以，使用有向无环图来定义作业流，在任务调度中是非常合适的。</p>
<h1 id="基础服务"><a href="#基础服务" class="headerlink" title="基础服务"></a>基础服务</h1><h2 id="Webserver"><a href="#Webserver" class="headerlink" title="Webserver"></a>Webserver</h2><p>是 Airflow 的基础服务，提供了前端可视化管理工具，可视化才是最好的！</p>
<p>你可以在上面执行调度操作，查看任务处理耗时分析，清除状态作业重跑，查看日志，管理用户和数据连接，以及配置的 DAG 是否正确等。</p>
<h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p>也是 Airflow 的基础服务之一，身为调度器，负责监控 DAG 的状态，计算调度时间，启动满足条件的 DAG，并将任务提交到 Executor。</p>
<h2 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h2><p>工作节点，这个角色类似于 yarn 中的 namenode，直接负责 Executor 的执行分配。</p>
<p>ps: yarn 为 hadoop 中的资源管理系统</p>
<h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>Airflow 有三种执行器</p>
<ul>
<li><p>SequentialExecutor </p>
<p>顺序执行器，无需额外配置，默认使用 sqlite 作为元数据，因此也无法支持任务之间的并发操作。</p>
</li>
<li><p>LocalExecutor</p>
<p>本地执行器，不支持 sqlite，但可使用 mysql、oracle、postgress 等主流数据库，需配置数据库链接 URL。</p>
</li>
<li><p>CeleryExecutor</p>
<p>江湖人称芹菜，是一款基于消息队列的分布式异步任务调度工具，可将任务运行在千里之外（远程节点），十分优秀！</p>
<p>ps: 需执行 Airflow 的工作节点 <code>airflow worker</code></p>
<p>pps: 需额外安装 <code>Redis</code> 或 <code>RabbitMQ</code> 等</p>
</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><p>有了作业流，就得有作业内容，Operators 就是做这事的。</p>
<p>Airflow 目前支持十多种不同的作业类型</p>
<ul>
<li>BashOperator</li>
<li>PythonOperator</li>
<li>DockerOperator</li>
<li>DruidCheckOperator</li>
<li>EmailOperator</li>
<li>HiveOperator</li>
<li>HTTPOperator</li>
<li>DummyOperator </li>
<li>……</li>
</ul>
<p>他们的作用都像字面意思说的那样，可完成相应的操作或调用。</p>
<p>值得注意的是 DummyOperator，是个空操作，相当于标记和中转节点。</p>
<p>当然，他们有一个共同的爸爸「BaseOperator」，中央集权，他一人的修改会改变儿子们继承到的功能。</p>
<h2 id="Timezone"><a href="#Timezone" class="headerlink" title="Timezone"></a>Timezone</h2><p>在 1.9 版本及以前，Airflow 使用的是本地时间，不同服务器时区不同容易产生运行错误。</p>
<p>而在 1.10 中，加入了自定义的时区配置（1.9 的时区配置无法生效，大坑。。）</p>
<h2 id="预警与监控"><a href="#预警与监控" class="headerlink" title="预警与监控"></a>预警与监控</h2><p>当任务执行失败或状态异常时，发送短信或邮件。</p>
<p>这是个棒棒的功能，守卫再严的城池也有失守的时候，硝烟一起，家书即刻送达。</p>
<p>你说，这为镇守襄阳城提供多少便利？</p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Airflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Airflow 如何让用户只能看到自己创建的 Dag</title>
    <url>/blog/2018/12/24/airflow-create-user-and-filter-dags-by-owner/</url>
    <content><![CDATA[<p>Airflow 是个很奇怪的东西，直到 1.10 它都没有权限系统，自带的创建用户和密码验证，只能作为一扇挡着外人的门。只要打开这扇门，里面的所有 <code>Owner</code> 下的 Dag 都会完完全全展示在你面前并且受你掌控。</p>
<p>究其原因，便是 airflow 自带的用户创建默认是 <code>superuser</code>，虽然话是这么说，创建个普通 user 就行了，但在一系列尝试后，我发现，它并没有提供其他等级的用户给你选择，只有 <code>superuser</code> 。。</p>
<p>所以在尝试了这一系列操作之后，我觉得有必要使用官方建议的 <code>LDAP</code>，虽然它看起来很麻烦的样子。</p>
<p>然而经过一番探查，我发现 <code>LDAP</code> 的作用并不是 filter dags by ower，他只是细粒度的分配登录权限。而真正的分发 Dag 到个人账户下，还是得等待 airflow 新版本的发布（当前版本该选项不生效）。</p>
<hr>
<p><a href="https://stackoverflow.com/questions/47205798/airflow-webserver-not-filtering-dags-by-owner">airflow webserver not filtering dags by owner</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Airflow</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Airflow 居然趁服务器不注意卡在 running 状态不执行</title>
    <url>/blog/2018/11/01/airflow-dag-get-stuck-in-running-state/</url>
    <content><![CDATA[<p>就像这样，这小子坏得很。</p>
<p><img src="/images/airflow/1541489895790.png" alt="1541489895790"></p>
<h2 id="初现端倪"><a href="#初现端倪" class="headerlink" title="初现端倪"></a>初现端倪</h2><p>好在 <code>Task Instance Details</code> 中可以看到这小子心里都在想些啥，这是十分关键的，以及具有重大突破性的调查入口！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">depends_on_past is true for this task&#x27;s DAG, but the previous task instance has not run yet.</span><br></pre></td></tr></table></figure>

<p>做为一个新来的 dag，旗下每一个格子都是小白块，怎么可能会有前置依赖没执行？十分任性！</p>
<h2 id="顺藤摸瓜"><a href="#顺藤摸瓜" class="headerlink" title="顺藤摸瓜"></a>顺藤摸瓜</h2><p>找到问题所在就好办了</p>
<p>前往代码中查看，我确实将 <code>depends_on_past</code> 置为 True` 了，但是每个 task 之间的依赖更是没有问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default_args = &#123;</span><br><span class="line">    &#x27;owner&#x27;: &#x27;amos&#x27;,</span><br><span class="line">    &#x27;depends_on_past&#x27;: True,</span><br><span class="line">    # &#x27;start_date&#x27;: airflow.utils.dates.days_ago(1),</span><br><span class="line">    &#x27;start_date&#x27;: datetime.now(),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尝试着将 <code>depends_on_past</code> 置为 <code>False</code> ，Airflow 立马开始了属于他自己的奔跑（按照依赖关系奔跑）！</p>
<h2 id="别出纰漏"><a href="#别出纰漏" class="headerlink" title="别出纰漏"></a>别出纰漏</h2><p>顺便一提，还有一种可能会导致这种情况的发生</p>
<p>那就是没有开启这个 dag，也就是 <code>trigger</code> 的状态为 <code>off</code>，这样会把任务挂起，直至开启 dag 才会执行。</p>
<hr>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p><a href="https://stackoverflow.com/questions/51261841/airflow-dag-get-stuck-in-running-state">AirFlow DAG Get stuck in running state</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Airflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Airflow 不遵循调度配置执行</title>
    <url>/blog/2018/10/31/airflow-dag-does-not-follow-the-schedule-configuration-execution/</url>
    <content><![CDATA[<p>在 Airflow 的使用过程中，曾多次遇到令人惊奇的现象，其中之一便是它没有按照 dag 中的配置执行。</p>
<p>可能你也会遇到这样的情况，为什么配置了 <code>schedule_interval</code> 和 <code>start_date</code>，但是依旧没有按照调度配置的时间自动执行。</p>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>比如我这么配：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timedelta</span><br><span class="line"></span><br><span class="line">default_args = &#123;</span><br><span class="line">    <span class="string">&#x27;owner&#x27;</span>: <span class="string">&#x27;amos&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;depends_on_past&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;start_date&#x27;</span>: datetime.now(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dag = DAG(<span class="string">&#x27;test_rerun_dag&#x27;</span>,</span><br><span class="line">          default_args=default_args,</span><br><span class="line">          description=<span class="string">&#x27;test_rerun_dag&#x27;</span>,</span><br><span class="line">          schedule_interval=<span class="string">&quot;*/1 * * * *&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>照理说它应该按照配置中写的，每分钟执行一次操作。可是它没有，是它变心了吗？</p>
<p>不，不是的。</p>
<h2 id="这究竟是为什么"><a href="#这究竟是为什么" class="headerlink" title="这究竟是为什么"></a>这究竟是为什么</h2><blockquote>
<p>Airflow sets execution_date based on the left bound of the schedule period it is covering, not based on when it fires (which would be the right bound of the period) .</p>
</blockquote>
<p>原因在于 Airflow 是个有原则的程序，它有个窗口的概念，会把 start_date 开始后，符合 schedule_interval 定义的第一个时间点记为 execution_date，但是会在下个时间点到达时才开始运行。也就是说由于这个窗口的原因，last run 会滞后一个周期。 </p>
<p>所以，按上面的配置来说，每次当 scheduler 读到了这段 DAG，它会拿小本本记下 start_date 和每分钟执行的操作，准备在下一分钟开始执行了。但是当下一分钟来临的时候，它看了看表，嗯！start_date + 1，那么 execution_date 也 + 1，于是把小本本上的 start_date 划掉重写。所以 start_date 在不断被覆盖的过程中，任务没有像我们预想中的在调度奔跑，反而一直是挂起状态。</p>
<h2 id="这可咋整啊"><a href="#这可咋整啊" class="headerlink" title="这可咋整啊"></a>这可咋整啊</h2><p>那么如何才能真正地让它规律地执行呢？</p>
<p>将 start_date 往前错位到上一个周期</p>
<p>什么意思呢？假如本例中的每分钟执行一次，那就将 start_date 调整到上一分钟的状态</p>
<blockquote>
<p><del>‘start_date’: datetime.now()</del></p>
</blockquote>
<blockquote>
<p>‘start_date’: datetime.now() - timedelta(minutes=1)</p>
</blockquote>
<p>这下 scheduler 就可以在小本本工工整整地记录每一次调度计划，而不用写了划，划了写，把小本本涂得黑黑的了！</p>
<hr>
<p>如果你的 dag 趁你不注意卡在running 状态下不能动弹，或许你可以改改调度时间或周期。</p>
<p>或者试试参考这篇文章：<a href="/blog/2018/11/01/airflow-dag-get-stuck-in-running-state/" title="Airflow 居然趁服务器不注意卡在 running 状态不执行">Airflow 居然趁服务器不注意卡在 running 状态不执行</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Airflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Airflow 安装及跳坑指南</title>
    <url>/blog/2018/10/29/airflow_install_and_more/</url>
    <content><![CDATA[<h2 id="有啥用"><a href="#有啥用" class="headerlink" title="有啥用"></a>有啥用</h2><p><code>Airflow</code> 简单来说就是管理和调度各种离线定时的 Job，用以替代 <code>crontab</code>， 可以把它看作是个高级版的 <code>crontab</code>。</p>
<p>如果 <code>crontab</code>  的规模达到百千万，管理起来会非常复杂。这个时候可以考虑将任务迁移到 <code>Airflow</code>，你将可以清楚地分辨出哪些 DAG 是稳定的，哪些不那么见状，需要优化。如果 DAG 不足以打动你，强交互性、友好的界面管理、重跑任务以及合适的报警级别足以让你感觉相见恨晚。</p>
<h2 id="简单记录安装及配置过程"><a href="#简单记录安装及配置过程" class="headerlink" title="简单记录安装及配置过程"></a>简单记录安装及配置过程</h2><p><code>Airflow</code> 在 1.8 之后更名为 <code>apache-airflow</code></p>
<blockquote>
<p>NOTE: The transition from 1.8.0 (or before) to 1.8.1 (or after) requires uninstalling Airflow before installing the new version. The package name was changed from airflow to apache-airflow as of version 1.8.1.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install apache-airflow</span></span><br></pre></td></tr></table></figure>

<p>如果你想安装 1.8.0 的 <code>Airflow</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install airflow</span></span><br></pre></td></tr></table></figure>



<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> airflow initdb</span></span><br></pre></td></tr></table></figure>

<p>初始化后默认会在 <code>~/</code> 下生成 <code>airflow</code> 文件夹，如果想更换 <code>MySQL</code> 或其他数据库做为元数据存储，那么在配置文件中修改配置后重新初始化即可。</p>
<p>关于如何在 python3 中安装 <code>MySQL</code>，此处不做赘述。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi ~/airflow/airflow.cfg</span></span><br><span class="line">sql_alchemy_conn = mysql://username:password@host:port/airflow</span><br></pre></td></tr></table></figure>



<h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><p><code>Airflow</code> 内置了芹菜的调度器，只需要手动安装芹菜并进行简单配置就可以使用。</p>
<p><code>Celery</code> 可使用 <code>RabbitMQ</code> 或 <code>Redis</code> 做为 broker，按需选择即可，此处也不做赘述。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install apache-airflow[celery]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用还需修改几处配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/airflow/airflow.cfg</span></span><br><span class="line">executor = CeleryExecutor</span><br><span class="line">broker_url = redis://127.0.0.1:6379/0</span><br><span class="line">result_backend = db+mysql://root:xxx@127.0.0.1:3306/airflow</span><br></pre></td></tr></table></figure>



<h3 id="这里有一个可能会踩入的小坑"><a href="#这里有一个可能会踩入的小坑" class="headerlink" title="这里有一个可能会踩入的小坑"></a>这里有一个可能会踩入的小坑</h3><p>既然项目更名了，在安装芹菜等扩展时，记得选对项目。</p>
<p>否则便会安装两个项目，导致后期使用出现冲突。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install apache-airflow</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install airflow[celery]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 list</span></span><br><span class="line">...</span><br><span class="line">apache-airflow (1.10.0)</span><br><span class="line">airflow (1.8.0)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动 webserver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> airflow webserver -p 8080</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动调度程序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> airflow scheduler</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 Celery</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> airflow worker</span></span><br></pre></td></tr></table></figure>

<p>启动完成后就可以运行官方内置的 example 测试啦！</p>
<h2 id="大坑"><a href="#大坑" class="headerlink" title="大坑"></a>大坑</h2><p>记录几个遇到的报错</p>
<h3 id="airflow-exceptions-AirflowException-Could-not-create-Fernet-object-Incorrect-padding"><a href="#airflow-exceptions-AirflowException-Could-not-create-Fernet-object-Incorrect-padding" class="headerlink" title="airflow.exceptions.AirflowException: Could not create Fernet object: Incorrect padding"></a>airflow.exceptions.AirflowException: Could not create Fernet object: Incorrect padding</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> airflow initdb</span></span><br><span class="line">[2018-10-30 15:30:26,857] &#123;settings.py:174&#125; INFO - setting.configure_orm(): Using pool settings. pool_size=5, pool_recycle=1800</span><br><span class="line">[2018-10-30 15:30:27,164] &#123;__init__.py:51&#125; INFO - Using executor CeleryExecutor</span><br><span class="line">DB: mysql://root:***@localhost:3306/airflow</span><br><span class="line">[2018-10-30 15:30:27,320] &#123;db.py:338&#125; INFO - Creating tables</span><br><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/models.py&quot;, line 159, in get_fernet</span><br><span class="line">    _fernet = Fernet(configuration.conf.get(&#x27;core&#x27;, &#x27;FERNET_KEY&#x27;).encode(&#x27;utf-8&#x27;))</span><br><span class="line">  File &quot;/usr/lib/python3/dist-packages/cryptography/fernet.py&quot;, line 34, in __init__</span><br><span class="line">    key = base64.urlsafe_b64decode(key)</span><br><span class="line">  File &quot;/usr/lib/python3.5/base64.py&quot;, line 134, in urlsafe_b64decode</span><br><span class="line">    return b64decode(s)</span><br><span class="line">  File &quot;/usr/lib/python3.5/base64.py&quot;, line 88, in b64decode</span><br><span class="line">    return binascii.a2b_base64(s)</span><br><span class="line">binascii.Error: Incorrect padding</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/home/ubuntu/.local/bin/airflow&quot;, line 32, in &lt;module&gt;</span><br><span class="line">    args.func(args)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/bin/cli.py&quot;, line 1002, in initdb</span><br><span class="line">    db_utils.initdb(settings.RBAC)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/utils/db.py&quot;, line 103, in initdb</span><br><span class="line">    schema=&#x27;airflow_ci&#x27;))</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 4, in __init__</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/sqlalchemy/orm/state.py&quot;, line 414, in _initialize_instance</span><br><span class="line">    manager.dispatch.init_failure(self, args, kwargs)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/sqlalchemy/util/langhelpers.py&quot;, line 66, in __exit__</span><br><span class="line">    compat.reraise(exc_type, exc_value, exc_tb)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/sqlalchemy/util/compat.py&quot;, line 187, in reraise</span><br><span class="line">    raise value</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/sqlalchemy/orm/state.py&quot;, line 411, in _initialize_instance</span><br><span class="line">    return manager.original_init(*mixed[1:], **kwargs)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/models.py&quot;, line 677, in __init__</span><br><span class="line">    self.extra = extra</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1, in __set__</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/models.py&quot;, line 731, in set_extra</span><br><span class="line">    fernet = get_fernet()</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/models.py&quot;, line 163, in get_fernet</span><br><span class="line">    raise AirflowException(&quot;Could not create Fernet object: &#123;&#125;&quot;.format(ve))</span><br><span class="line">airflow.exceptions.AirflowException: Could not create Fernet object: Incorrect padding</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="fernet-key"><a href="#fernet-key" class="headerlink" title="fernet_key"></a>fernet_key</h4><p>关于 <code>fernet_key</code> 是什么，配置文件里给出了相应的解释：</p>
<blockquote>
<p>Secret key to save connection passwords in the db</p>
</blockquote>
<h4 id="干掉它"><a href="#干掉它" class="headerlink" title="干掉它"></a>干掉它</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成一个 key 替换配置文件中的 fernet_key</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 -c <span class="string">&quot;from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/airflow/airflow.cfg</span></span><br><span class="line">fernet_key = g3589dfasdfhnht289tghdsfij---dfadfgeu812=</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> airflow initdb</span></span><br><span class="line">[2018-10-30 15:31:21,159] &#123;settings.py:174&#125; INFO - setting.configure_orm(): Using pool settings. pool_size=5, pool_recycle=1800</span><br><span class="line">[2018-10-30 15:31:21,464] &#123;__init__.py:51&#125; INFO - Using executor CeleryExecutor</span><br><span class="line">DB: mysql://root:***@localhost:3306/airflow</span><br><span class="line">[2018-10-30 15:31:21,620] &#123;db.py:338&#125; INFO - Creating tables</span><br><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure>



<h3 id="TypeError-b’5e36be93294a6fea65a4c81571388241b1667fca’-is-not-JSON-serializable"><a href="#TypeError-b’5e36be93294a6fea65a4c81571388241b1667fca’-is-not-JSON-serializable" class="headerlink" title="TypeError: b’5e36be93294a6fea65a4c81571388241b1667fca’ is not JSON serializable"></a>TypeError: b’5e36be93294a6fea65a4c81571388241b1667fca’ is not JSON serializable</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Ooops.</span><br><span class="line"></span><br><span class="line">                          ____/ (  (    )   )  \___</span><br><span class="line">                         /( (  (  )   _    ))  )   )\</span><br><span class="line">                       ((     (   )(    )  )   (   )  )</span><br><span class="line">                     ((/  ( _(   )   (   _) ) (  () )  )</span><br><span class="line">                    ( (  ( (_)   ((    (   )  .((_ ) .  )_</span><br><span class="line">                   ( (  )    (      (  )    )   ) . ) (   )</span><br><span class="line">                  (  (   (  (   ) (  _  ( _) ).  ) . ) ) ( )</span><br><span class="line">                  ( (  (   ) (  )   (  ))     ) _)(   )  )  )</span><br><span class="line">                 ( (  ( \ ) (    (_  ( ) ( )  )   ) )  )) ( )</span><br><span class="line">                  (  (   (  (   (_ ( ) ( _    )  ) (  )  )   )</span><br><span class="line">                 ( (  ( (  (  )     (_  )  ) )  _)   ) _( ( )</span><br><span class="line">                  ((  (   )(    (     _    )   _) _(_ (  (_ )</span><br><span class="line">                   (_((__(_(__(( ( ( |  ) ) ) )_))__))_)___)</span><br><span class="line">                   ((__)        \\||lll|l||///          \_))</span><br><span class="line">                            (   /(/ (  )  ) )\   )</span><br><span class="line">                          (    ( ( ( | | ) ) )\   )</span><br><span class="line">                           (   /(| / ( )) ) ) )) )</span><br><span class="line">                         (     ( ((((_(|)_)))))     )</span><br><span class="line">                          (      ||\(|(|)|/||     )</span><br><span class="line">                        (        |(||(||)||||        )</span><br><span class="line">                          (     //|/l|||)|\\ \     )</span><br><span class="line">                        (/ / //  /|//||||\\  \ \  \ _)</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Node: ubuntu</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1982, in wsgi_app</span><br><span class="line">    response = self.full_dispatch_request()</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1614, in full_dispatch_request</span><br><span class="line">    rv = self.handle_user_exception(e)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1517, in handle_user_exception</span><br><span class="line">    reraise(exc_type, exc_value, tb)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/_compat.py&quot;, line 33, in reraise</span><br><span class="line">    raise value</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1612, in full_dispatch_request</span><br><span class="line">    rv = self.dispatch_request()</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1598, in dispatch_request</span><br><span class="line">    return self.view_functions[rule.endpoint](**req.view_args)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_admin/base.py&quot;, line 69, in inner</span><br><span class="line">    return self._run_view(f, *args, **kwargs)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_admin/base.py&quot;, line 368, in _run_view</span><br><span class="line">    return fn(self, *args, **kwargs)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_login.py&quot;, line 755, in decorated_view</span><br><span class="line">    return func(*args, **kwargs)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/utils/db.py&quot;, line 74, in wrapper</span><br><span class="line">    return func(*args, **kwargs)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/views.py&quot;, line 2061, in index</span><br><span class="line">    auto_complete_data=auto_complete_data)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_admin/base.py&quot;, line 308, in render</span><br><span class="line">    return render_template(template, **kwargs)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/templating.py&quot;, line 134, in render_template</span><br><span class="line">    context, ctx.app)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/templating.py&quot;, line 116, in _render</span><br><span class="line">    rv = template.render(context)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/jinja2/environment.py&quot;, line 989, in render</span><br><span class="line">    return self.environment.handle_exception(exc_info, True)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/jinja2/environment.py&quot;, line 754, in handle_exception</span><br><span class="line">    reraise(exc_type, exc_value, tb)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/jinja2/_compat.py&quot;, line 37, in reraise</span><br><span class="line">    raise value.with_traceback(tb)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/templates/airflow/dags.html&quot;, line 18, in top-level template code</span><br><span class="line">    &#123;% extends &quot;airflow/master.html&quot; %&#125;</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/templates/airflow/master.html&quot;, line 18, in top-level template code</span><br><span class="line">    &#123;% extends &quot;admin/master.html&quot; %&#125;</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/templates/admin/master.html&quot;, line 18, in top-level template code</span><br><span class="line">    &#123;% extends &#x27;admin/base.html&#x27; %&#125;</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_admin/templates/bootstrap3/admin/base.html&quot;, line 74, in top-level template code</span><br><span class="line">    &#123;% block tail_js %&#125;</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/templates/admin/master.html&quot;, line 44, in block &quot;tail_js&quot;</span><br><span class="line">    xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token() &#125;&#125;&quot;);</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_wtf/csrf.py&quot;, line 47, in generate_csrf</span><br><span class="line">    setattr(g, field_name, s.dumps(session[field_name]))</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/itsdangerous/serializer.py&quot;, line 166, in dumps</span><br><span class="line">    payload = want_bytes(self.dump_payload(obj))</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/itsdangerous/url_safe.py&quot;, line 42, in dump_payload</span><br><span class="line">    json = super(URLSafeSerializerMixin, self).dump_payload(obj)</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/itsdangerous/serializer.py&quot;, line 133, in dump_payload</span><br><span class="line">    return want_bytes(self.serializer.dumps(obj, **self.serializer_kwargs))</span><br><span class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/itsdangerous/_json.py&quot;, line 18, in dumps</span><br><span class="line">    return json.dumps(obj, **kwargs)</span><br><span class="line">  File &quot;/usr/lib/python3.5/json/__init__.py&quot;, line 237, in dumps</span><br><span class="line">    **kw).encode(obj)</span><br><span class="line">  File &quot;/usr/lib/python3.5/json/encoder.py&quot;, line 198, in encode</span><br><span class="line">    chunks = self.iterencode(o, _one_shot=True)</span><br><span class="line">  File &quot;/usr/lib/python3.5/json/encoder.py&quot;, line 256, in iterencode</span><br><span class="line">    return _iterencode(o, 0)</span><br><span class="line">  File &quot;/usr/lib/python3.5/json/encoder.py&quot;, line 179, in default</span><br><span class="line">    raise TypeError(repr(o) + &quot; is not JSON serializable&quot;)</span><br><span class="line">TypeError: b&#x27;5e36be93294a6fea65a4c81571388241b1667fca&#x27; is not JSON serializable</span><br></pre></td></tr></table></figure>

<p>这个错误十分诡异，至今不解，项目运行环境为 <code>Python 3.5.2</code></p>
<p>连首页都进不去，使用的地址为 <code>127.0.0.1:8080</code>，后面尝试把地址修改为 <code>localhost:8080</code> ，就没有这个报错了 Orz</p>
<hr>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p><a href="https://medium.com/airbnb-engineering/airflow-a-workflow-management-platform-46318b977fd8">Airflow: a workflow management platform</a></p>
<p><a href="https://medium.com/videoamp/what-we-learned-migrating-off-cron-to-airflow-b391841a0da4">What we learned migrating off Cron to Airflow</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>airflow</tag>
      </tags>
  </entry>
  <entry>
    <title>懒汉式单例中双重检查的好处</title>
    <url>/blog/2017/07/27/benefits-of-singleton-pattern-double-checking/</url>
    <content><![CDATA[<p>记得前阵子面试金山时碰到了这样一个问题</p>
<p>1）下面哪一种写法更好，为什么？<br>2）请写出另一种单例模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很显然，第一种代码块是线程不安全的。<br>比如说这种情况，有一个线程调用了getInstance()，但执行到if(singleton==null)这一步时，另一个线程也进入了这个方法，那么便会造成最终创建了两个Singleton实例。<br>而若是第二种代码块，在同步锁中加入第二次验证，就不怕多个线程同时进入方法体导致的多个实例被创建了。</p>
<p>以上两个方法块俗称懒汉式单例模式，意为调用时再创建实例对象。</p>
<p>另一种单例模式称为饿汉式单例模式，不同的点在于类装载时便完成了类实例化，以下两种方法块都是饿汉式的表现方法，是一样的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">     instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后再推荐个与双重检查一样线程安全的，静态内部类实现的懒汉式单例模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> Singleton&#123;&#125;;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span></span>&#123;</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p>
<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>axios 添加登录拦截器后出现 preflight response 错误</title>
    <url>/blog/2018/04/02/axios-intercepter-perflight-response-error/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了加强网站安全性，给除了登录注册等特殊页面外的页面路由都加上了访问控制。然后问题就出现了，接口请求没有返回值了！抛了这样一个错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Request header field 8080:1 Authorization is not allowed by Access-Control-Allow-Headers in preflight response</span><br></pre></td></tr></table></figure>

<p>之前的跨域设置居然不管用了！</p>
<h1 id="挣扎"><a href="#挣扎" class="headerlink" title="挣扎"></a>挣扎</h1><h2 id="分析拦截器代码"><a href="#分析拦截器代码" class="headerlink" title="分析拦截器代码"></a>分析拦截器代码</h2><p>看看这个拦截器代码究竟做了什么！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http request 拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">    <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (store.state.token) &#123;  <span class="comment">// 判断是否存在token，如果存在的话，则每个http header都加上token</span></span><br><span class="line">            config.headers.Authorization = <span class="string">`token <span class="subst">$&#123;store.state.token&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http response 拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">                    <span class="comment">// 返回 401 清除token信息并跳转到登录页面</span></span><br><span class="line">                    store.commit(types.LOGOUT);</span><br><span class="line">                    router.replace(&#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">                        <span class="attr">query</span>: &#123;<span class="attr">redirect</span>: router.currentRoute.fullPath&#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response.data)   <span class="comment">// 返回接口返回的错误信息</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>嗯！debugger一波找到原因在第五行，添加了一个新的请求头<code>Authorization</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config.headers.Authorization = <span class="string">`token <span class="subst">$&#123;store.state.token&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<p>然而，在前端的请求中并没有看到<code>Authorization</code>这个头。。</p>
<h2 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h2><p>在查看请求详情的时候发现一条重要信息：</p>
<p><img src="../images/options_request.png" alt="options request"></p>
<p>options请求过后没有请求接口，那么就证明是服务端拒绝了访问。</p>
<blockquote>
<p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 以外的 HTTP 请求，或者搭配某些 MIME 类型的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 请求），浏览器必须首先使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS"><code>OPTIONS</code></a> 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">Cookies </a>和 HTTP 认证相关数据）。</p>
<p>— 来自 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">MDN web docs</a></p>
</blockquote>
<h1 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h1><p>解决的办法也很简单，在服务端的跨域拦截器中给<code>OPTIONS</code>方法放行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增一个 Authorization 请求头</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放行 OPTIONS 请求方法</span></span><br><span class="line"><span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;OPTIONS&quot;</span>)) &#123;</span><br><span class="line">  response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端放行<code>OPTIONS</code>方法后，再次请求，就可以看到同一个请求发送了两次。第一条为 options 方法，第二条请求就是 post 或 get 请求啦，并且在 header 中也可以看到 axios 拦截器设置的 Authorization 了。</p>
<hr>
<p>参考链接</p>
<p><a href="https://github.com/superman66/vue-axios-github">axios 登录拦截器</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">Access control CORS</a></p>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>axios</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JavaScript进行货币格式化</title>
    <url>/blog/2017/05/23/currency-formatting-by-javascript/</url>
    <content><![CDATA[<p>在项目中碰到关于货币金额的页面显示，为了让金额的显示更为人性化与规范化，需要加入货币格式化策略。<br>也就是所谓的数字千分位格式化。<br>例如<code>￥39,998</code> <code>$1,299</code></p>
<p>以下为包含小数处理的三种代码块。</p>
<span id="more"></span>

<p>保留2位小数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数值四舍五入(保留2位小数)后格式化成金额形式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>num 数值(Number或者String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return </span>金额格式的字符串,如&#x27;1,234,567.45&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="variable">String</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">formatCurrency</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    num = num.toString().replace(<span class="regexp">/\$|\,/g</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(num))</span><br><span class="line">        num = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    sign = (num == (num = <span class="built_in">Math</span>.abs(num)));</span><br><span class="line">    num = <span class="built_in">Math</span>.floor(num*<span class="number">100</span>+<span class="number">0.50000000001</span>);</span><br><span class="line">    cents = num%<span class="number">100</span>;</span><br><span class="line">    num = <span class="built_in">Math</span>.floor(num/<span class="number">100</span>).toString();</span><br><span class="line">    <span class="keyword">if</span>(cents&lt;<span class="number">10</span>)</span><br><span class="line">    cents = <span class="string">&quot;0&quot;</span> + cents;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.floor((num.length-(<span class="number">1</span>+i))/<span class="number">3</span>); i++)</span><br><span class="line">    num = num.substring(<span class="number">0</span>,num.length-(<span class="number">4</span>*i+<span class="number">3</span>))+<span class="string">&#x27;,&#x27;</span>+</span><br><span class="line">    num.substring(num.length-(<span class="number">4</span>*i+<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> (((sign)?<span class="string">&#x27;&#x27;</span>:<span class="string">&#x27;-&#x27;</span>) + num + <span class="string">&#x27;.&#x27;</span> + cents);</span><br></pre></td></tr></table></figure>

<p>保留1位小数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数值四舍五入(保留1位小数)后格式化成金额形式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>num 数值(Number或者String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return </span>金额格式的字符串,如&#x27;1,234,567.4&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="variable">String</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCurrencyTenThou</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    num = num.toString().replace(<span class="regexp">/\$|\,/g</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(num))</span><br><span class="line">    num = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    sign = (num == (num = <span class="built_in">Math</span>.abs(num)));</span><br><span class="line">    num = <span class="built_in">Math</span>.floor(num*<span class="number">10</span>+<span class="number">0.50000000001</span>);</span><br><span class="line">    cents = num%<span class="number">10</span>;</span><br><span class="line">    num = <span class="built_in">Math</span>.floor(num/<span class="number">10</span>).toString();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.floor((num.length-(<span class="number">1</span>+i))/<span class="number">3</span>); i++)</span><br><span class="line">    num = num.substring(<span class="number">0</span>,num.length-(<span class="number">4</span>*i+<span class="number">3</span>))+<span class="string">&#x27;,&#x27;</span>+</span><br><span class="line">    num.substring(num.length-(<span class="number">4</span>*i+<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> (((sign)?<span class="string">&#x27;&#x27;</span>:<span class="string">&#x27;-&#x27;</span>) + num + <span class="string">&#x27;.&#x27;</span> + cents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不保留小数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatPrice</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> t = <span class="built_in">parseInt</span>(n), i, r;</span><br><span class="line">   <span class="keyword">for</span> (t = t.toString().replace(<span class="regexp">/^(\d*)$/</span>, <span class="string">&quot;$1.&quot;</span>), t = (t + <span class="string">&quot;00&quot;</span>).replace(<span class="regexp">/(\d*\.\d\d)\d*/</span>, <span class="string">&quot;$1&quot;</span>), t = t.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;,&quot;</span>), i = <span class="regexp">/(\d)(\d&#123;3&#125;,)/</span>; i.test(t); )</span><br><span class="line">       t = t.replace(i, <span class="string">&quot;$1,$2&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> t = t.replace(<span class="regexp">/,(\d\d)$/</span>, <span class="string">&quot;.$1&quot;</span>), r = t.split(<span class="string">&quot;.&quot;</span>), r[<span class="number">1</span>] == <span class="string">&quot;00&quot;</span> &amp;&amp; (t = r[<span class="number">0</span>]), t</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接：<br><a href="http://www.haorooms.com/post/js_qian_huobi_gs">http://www.haorooms.com/post/js_qian_huobi_gs</a><br><a href="https://github.com/lishengzxc/bblog/issues/15">https://github.com/lishengzxc/bblog/issues/15</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Grafana + Graphite 进行数据预警监控</title>
    <url>/blog/2018/12/17/data-alert-by-graphite-and-grafana/</url>
    <content><![CDATA[<p><img src="../images/grafana/DeepinScrot-2637.png"></p>
<h1 id="向-Graphite-写入数据"><a href="#向-Graphite-写入数据" class="headerlink" title="向 Graphite 写入数据"></a>向 Graphite 写入数据</h1><p>Graphite 的数据主要以 <code>whisper</code> 的格式存储在 <code>carbon</code> 这个组件中，而向其中填充数据的话我们有多种方式，这里演示两种常用手段。</p>
<h2 id="使用-python"><a href="#使用-python" class="headerlink" title="使用 python"></a>使用 python</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install graphyte</span></span><br></pre></td></tr></table></figure>

<p>这里使用了 <code>graphyte</code>，用法很简单，只需要指定写入的 series 对应的值即可，写入的时间戳与 tag 是附加选项，可写可不写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">graphyte.send(series, value, timestamp, &#123;<span class="string">&#x27;tag_name&#x27;</span>: tag_value, <span class="string">&#x27;tag_name&#x27;</span>: <span class="string">&#x27;tag_value&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="使用-curl"><a href="#使用-curl" class="headerlink" title="使用 curl"></a>使用 curl</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;foo.bar 3 `date +%s`&quot;</span> | nc 127.0.0.1 2003</span></span><br></pre></td></tr></table></figure>

<p>当数据准备好了之后便按你的喜好来设置图形的样式</p>
<h1 id="设置预警"><a href="#设置预警" class="headerlink" title="设置预警"></a>设置预警</h1><p>进入到 <code>Grafana</code> 中的 Alert 标签下，主要需要设置以下几个参数</p>
<ol>
<li>Alert Config</li>
<li>Conditions</li>
</ol>
<p>如果想在设置的阈值触发时发送消息通知，则需要进一步设置 <code>Notifications</code> 以及 <code>Alert Rules</code> 和 <code>Notification channels</code></p>
<h2 id="Alert-Config"><a href="#Alert-Config" class="headerlink" title="Alert Config"></a>Alert Config</h2><p>主要关注 <code>Evaluate every</code> 这个选项</p>
<p>我猜想 Grafana 的开发团队对它的定义为时效性高的预警通知工具，对于数据异常的及时发现，对比的间隔时间显然是越短越好。</p>
<p>它们希望你将比对的时间间隔缩短，30s、60s、120s，这样发现数据异常的速度也就越快。</p>
<p>今年年初，开发者在一条 issue 下做过这样一个答复</p>
<blockquote>
<p>torkelo: you cannot control what time of day it will evaluate, it will evaluate every 24 hours. So if it was more than 24 hours since last evaluation it will evaluate (no matter what time of day)</p>
</blockquote>
<p>所以，<strong>grafana 对小时级、天级或在精确时间点触发预警的支持是很不友好的</strong>。</p>
<span id="more"></span>

<p>例如，你想让你的数据在每个整点触发一次数据比对，至少在当前的最新版本(v5.4.2)，都是不支持的。</p>
<p>而在 <code>Evaluate every</code> 的配置下，你也<strong>无法保证它的执行时间</strong>。</p>
<p>举个栗子，你做了这样的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Evaluate every: 1h</span><br></pre></td></tr></table></figure>

<p>设置了 1h 的执行间隔，那<strong>当这次告警对比结束后，它会在下一个告警周期中的不确定时间开始新的告警对比</strong>。</p>
<p>也就是说，假设 Grafana 在 10:00 的时候执行了一次，你期待它下次执行时间为 11:00，然而现实是它会在 10:00 ~ 11:00 间的任意时间执行，提前执行。</p>
<p>如果你想到了，那就能早早更改策略，如果想不到，那也开心下，毕竟生活处处是惊喜。</p>
<h2 id="Conditions"><a href="#Conditions" class="headerlink" title="Conditions"></a>Conditions</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avg() OF query(A, 15m, now) IS BELOW 14</span><br></pre></td></tr></table></figure>

<p>预警阈值主要就是在这里设置，解释下上面的表达式：</p>
<p>A 线的 15 分钟前至当前的平均值，如果小低于 14，则触发报警。</p>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><blockquote>
<p>我想计算当前与过去七天平均值的增减幅？</p>
</blockquote>
<p>思路是对过去七天的数据取平均值，再来与当前时间比对，但是由于 <code>Graphite</code> 并没有让 <code>series</code> 与常数做计算的函数，所以我们只能用另一种精妙的方式曲线救国。</p>
<p>计算增减幅的公式为：(当前 - 过去)/过去 =&gt; 当前/过去 - 1</p>
<p>所以我们只需要画一条当前与过去的比值，再在 <code>Conditions</code> 的阈值中设置预期值 + 1 即可</p>
<p>例如，我们想在增幅超过 50% 减幅超过 30% 时触发告警通知，那么使用 <code>asPercent</code> 函数便可计算出当前占用过去的比率，再在 <code>Conditions</code> 中进行这样的配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avg() OF query(C, 15m, now) IS OUTSIDE RANGE 70 to 150</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Graphite</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>如何删除GitHub的历史commit</title>
    <url>/blog/2017/05/22/delete-github-history-by-bfg/</url>
    <content><![CDATA[<p><img src="/images/github-hacker.jpg"></p>
<p>这可能是目前互联网上最详细的BFG Repo-Cleaner中文教程了。</p>
<p>为了删除三天前的一次错误提交，我开始寻找关于撤销github历史commit的方法。<br>实话说，经历了6个小时的搜索，我依旧没有找到能解决我所碰到的奇怪问题的解决方案，我发现网络上对于BFG的相关讨论太少太少，尤其是中文的信息，更是贫瘠。另外的原因也是大部分人确实能按照官方的指引，一步到位地删除历史提交的信息。我失败了，不知道是因为git配置或是哪出了纰漏，但也因此浏览了互联网上大部分解答。<br>以下是我整理出的使用教程。</p>
<span id="more"></span>

<h2 id="BFG-Repo-Cleaner"><a href="#BFG-Repo-Cleaner" class="headerlink" title="BFG Repo-Cleaner"></a><a href="https://rtyley.github.io/bfg-repo-cleaner/">BFG Repo-Cleaner</a></h2><blockquote>
<p>github称BFG为<code>git filter-branch</code>的替代品。一款比它更快更简单的用于删除无用数据的工具。</p>
</blockquote>
<p>作为一个github官方推荐的”仓库清理工具”，快速和简单是它被推荐的重要原因，程序为一个<code>Scala</code>编写而成的jar包，也意味着运行环境需要jdk的支持。<br>ok，竟然github都这样推荐了，就先来试一试。</p>
<h3 id="BFG的主要功能与使用步骤如下："><a href="#BFG的主要功能与使用步骤如下：" class="headerlink" title="BFG的主要功能与使用步骤如下："></a>BFG的主要功能与使用步骤如下：</h3><h4 id="1-克隆仓库"><a href="#1-克隆仓库" class="headerlink" title="1.克隆仓库"></a>1.克隆仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --mirror git://example.com/some-big-repo.git</span></span><br></pre></td></tr></table></figure>
<p>使用<code>--mirror</code>标记clone一份repo（目标仓库）到本地。</p>
<h4 id="2-执行BFG命令移除文件"><a href="#2-执行BFG命令移除文件" class="headerlink" title="2.执行BFG命令移除文件"></a>2.执行BFG命令移除文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -jar 占位符1 占位符2 占位符3</span></span><br></pre></td></tr></table></figure>
<p>clone下来的git仓库和你想象中应该是有点差距的，因为它和你托管在github上的仓库并不一样，它并没有你编写的代码和文件结构，但它与你的库相关联。你可以选择备份也可以选择直接操作。</p>
<p>占位符1：</p>
<blockquote>
<ul>
<li>jar包路径，若刚好位于bash的当前目录，则直接输入jar包文件名 例：bfg-1.12.15.jar</li>
</ul>
</blockquote>
<p>占位符2：</p>
<blockquote>
<ul>
<li><code>--strip-blobs-bigger-than 10M </code> 删除所有大于10m的文件</li>
<li><code>--delete-files id_&#123;dsa,rsa&#125;</code> 删除id_dsa, id_rsa</li>
<li><code>--delete-files file</code> 删除目标文件</li>
<li><code>--replace-text passwords.txt</code> txt定义语法替换文件内容</li>
<li><code>--delete-folders folder</code> 删除文件夹</li>
</ul>
</blockquote>
<p>占位符3：</p>
<blockquote>
<ul>
<li>clone下来的git文件名 例：some-big-repo.git</li>
</ul>
</blockquote>
<p>e.g.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar bfg.jar --strip-blobs-bigger-than 10M some-big-repo.git</span><br></pre></td></tr></table></figure>
<h4 id="3-使用gc命令删除目标数据"><a href="#3-使用gc命令删除目标数据" class="headerlink" title="3.使用gc命令删除目标数据"></a>3.使用gc命令删除目标数据</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> some-big-repo.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</span></span><br></pre></td></tr></table></figure>

<h4 id="4-提交修改"><a href="#4-提交修改" class="headerlink" title="4.提交修改"></a>4.提交修改</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push</span></span><br></pre></td></tr></table></figure>

<p>至此，新clone出来的git库中，将再也找不到被删除的内容了。<br>相关参考链接请移步页脚。</p>
<hr>
<p>以下记录我遇到的问题</p>
<p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar bfg-1.12.15.jar --delete-files carousel.jsp tmall-web-store.git</span><br></pre></td></tr></table></figure>
<p>报错信息：These are your protected commits, and so their contents will NOT be altered: commit 6c3f4d5a (protected by ‘HEAD’)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -jar bfg-1.12.15.jar --delete-files xxxxx.xx xxxxx.git</span></span><br><span class="line"></span><br><span class="line">Using repo : C:\Users\js\Downloads\xxxxx.git</span><br><span class="line"></span><br><span class="line">Found 205 objects to protect</span><br><span class="line">Found 2 commit-pointing refs : HEAD, refs/heads/master</span><br><span class="line"></span><br><span class="line">Protected commits</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">These are your protected commits, and so their contents will NOT be altered:</span><br><span class="line"></span><br><span class="line"> * commit 6c3f4d5a (protected by &#x27;HEAD&#x27;)</span><br><span class="line"></span><br><span class="line">Cleaning</span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line">Found 14 commits</span><br><span class="line">Cleaning commits:       100% (14/14)</span><br><span class="line">Cleaning commits completed in 93 ms.</span><br><span class="line"></span><br><span class="line">BFG aborting: No refs to update - no dirty commits found??</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">You can rewrite history in Git - don&#x27;t let Trump do it for real!</span><br><span class="line">Trump&#x27;s administration has lied consistently, to make people give up on ever</span><br><span class="line">being told the truth. Don&#x27;t give up: https://github.com/bkeepers/stop-trump</span><br><span class="line">--</span><br></pre></td></tr></table></figure>
<p>我不明白为什么会显示protected commits，在我尝试多次commit之后，也就是修改head~1，或是手动删除文件，都无法让程序成功运行下去。甚至在多次push与pull之后，commit记录竟x2了…</p>
<p>几近崩溃的我只能执行git上取消上一个commit的命令,手动撤销了所有的记录（包括目标记录后的几条commit），再重新提交…Orz</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD~1</span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure>

<h2 id="–-2018-01-05更新-–"><a href="#–-2018-01-05更新-–" class="headerlink" title="– 2018.01.05更新 –"></a>– 2018.01.05更新 –</h2><p>又遇到上传错东西的问题了。。</p>
<blockquote>
<ul>
<li>java -jar bfg.jar  –delete-files xxx.yml zhiliao</li>
<li>git rebase -i ‘(此处填写commit id，一长串的那个)’</li>
</ul>
</blockquote>
<p>遇到不让push的时候就强制push</p>
<blockquote>
<ul>
<li>git push origin master -f</li>
</ul>
</blockquote>
<p>相关链接：</p>
<blockquote>
<ul>
<li><a href="https://rtyley.github.io/bfg-repo-cleaner/">BFG Repo-Cleaner</a></li>
<li><a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/">[github]Removing sensitive data from a repository</a></li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>GitHub</tag>
        <tag>BFG</tag>
      </tags>
  </entry>
  <entry>
    <title>给GitHub Pages绑定域名 附namesilo域名优惠券</title>
    <url>/blog/2017/06/01/github-blog-binding-domain/</url>
    <content><![CDATA[<p>在GitHub上托管Hexo博客，访问地址自然是username.github.io，如果想用自己的域名访问这个网址，怎么做呢？<br>本文从域名选购到域名绑定一条龙,给你一个更清晰的操作流程。</p>
<span id="more"></span>
<h1 id="域名选购"><a href="#域名选购" class="headerlink" title="域名选购"></a>域名选购</h1><p>若已有域名可直接跳到<a href="#%E4%BD%BF%E7%94%A8DNSPod%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1">第二步</a>。</p>
<p>说到域名选购，大家第一个想到的应该是狗爹(godaddy)？name？或namecheap？我使用的域名商叫<code>namesilo</code>，虽不是老牌的域名商，却也不是小年轻。并且不需要你有paypal或双币信用卡，良心地<code>支持支付宝</code>，还<code>免费赠送Whois隐私保护</code>。可能你们也听说过，没错我就是冲着赠送的whois保护去的哈哈哈~~<br>进入<a href="www.namesilo.com">namesilo官网</a>，点击右上角创建账户</p>
<p><img src="/images/namesilo-address-info.png"><br>值得一提的是上图红框中的信息最好填写真实地址，毕竟账号丢了或者因为其他原因登录不了，你得凭借真实信息找回账号的嘛。whois隐私保护的好处也就体现在这里，你的私人信息只有namesilo看得到。</p>
<p><img src="/images/namesilo-buy.png"><br>选择你想要的域名</p>
<p><img src="/images/namesilo-cart.png"><br>然后这个页面记得选上<code>privacy setting</code>里的whois保护</p>
<p>以及每个账户仅限一次的1美元优惠，填入<code>11%off</code>或者<code>1udown</code>即可以$7.99的价格拿下这个域名。</p>
<p>今天的汇率是 $1 : ￥6.8 你们呢2333</p>
<h1 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h1><h2 id="更改namesilo的dns指向"><a href="#更改namesilo的dns指向" class="headerlink" title="更改namesilo的dns指向"></a>更改namesilo的dns指向</h2><p>如果在域名购买时，表单中的NameServers有填入dns的话，就可以直接跳到<a href="#%E4%BD%BF%E7%94%A8DNSPod%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1">下一步</a>啦。</p>
<p><img src="/images/namesilo-dns.png"><br>如果没有的话就在右上角<code>Manage My Domains</code>中点击这个蓝色小按钮，删除其中的三条默认dns解析地址，再回来点击<code>ChangeNameservers</code>按钮。</p>
<p><img src="/images/namesilo-change.png"><br>将<code>NameServer 1</code>和<code>NameServer 2</code>改成</p>
<blockquote>
<p>f1g1ns1.dnspod.net<br>f1g1ns2.dnspod.net</p>
</blockquote>
<p>当然你想用默认或其他的dns解析服务也行。</p>
<h2 id="使用DNSPod解析服务"><a href="#使用DNSPod解析服务" class="headerlink" title="使用DNSPod解析服务"></a>使用DNSPod解析服务</h2><p>提供dns解析的商家有很多，这里只给出DNSPod的操作步骤，但是一通百通，界面不一样，操作手法还是相同的。<br><img src="/images/dnspod-setting.png"></p>
<p>添加三个数据</p>
<blockquote>
<p>@  A  192.30.252.153<br>@  A  192.30.252.154<br>www  CNAME  username.github.io</p>
</blockquote>
<p>注意：CNAME后的ip地址，千万不要使用ping命令得到的ip，因为GitHub Pages的页面ip不是固定ip，可能这阵子可以正常解析到你的页面，过阵子可能就解析到别人的页面去了！</p>
<h3 id="主机记录和记录类型说明"><a href="#主机记录和记录类型说明" class="headerlink" title="主机记录和记录类型说明"></a>主机记录和记录类型说明</h3><blockquote>
<p>www：解析后的域名为 <a href="http://www.xxxxx.com/">www.xxxxx.com</a><br>@：直接解析主域名 xxxxx.com<br>*：泛解析，匹配其他所有域名 *.xxxxx.com</p>
<p>A记录：地址记录，用来指定域名的IPv4地址（如：8.8.8.8），如果需要将域名指向一个IP地址，就需要添加A记录。<br>CNAME： 如果需要将域名指向另一个域名，再由另一个域名提供ip地址，就需要添加CNAME记录。</p>
</blockquote>
<h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><p>在Hexo本地目录中的source文件夹里，添加一个命名为CNAME的无后缀文件，文件中的填写你的域名.<br>如果你想让地址栏的域名显示www前缀就输入<code>www.xxxcc.com</code>，否则输入<code>xxxxx.com</code>即可。<br>例如</p>
<blockquote>
<p><a href="http://www.xxxxx.com/">www.xxxxx.com</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>配置完后等待一会儿就可以访问啦~</p>
]]></content>
      <tags>
        <tag>GitHub</tag>
        <tag>namesilo</tag>
        <tag>domain</tag>
        <tag>Hexo</tag>
        <tag>DNSPod</tag>
      </tags>
  </entry>
  <entry>
    <title>Haproxy 之常用配置详解</title>
    <url>/blog/2019/04/28/haproxy-common-configuration-analysis/</url>
    <content><![CDATA[<p>HAProxy 配置中有三个重要部分</p>
<ul>
<li>global</li>
<li>defaults</li>
<li>listen or (frontend + backend)</li>
</ul>
<h2 id="常用配置详解"><a href="#常用配置详解" class="headerlink" title="常用配置详解"></a>常用配置详解</h2><h3 id="全局配置（global）"><a href="#全局配置（global）" class="headerlink" title="全局配置（global）"></a>全局配置（global）</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>值</th>
<th>参数含义</th>
</tr>
</thead>
<tbody><tr>
<td>maxconn</td>
<td>20480</td>
<td>默认最大连接数</td>
</tr>
<tr>
<td>daemon</td>
<td></td>
<td>以后台形式运行haproxy</td>
</tr>
<tr>
<td>nbproc</td>
<td>1</td>
<td>进程数量（可以设置多个进程提高性能）</td>
</tr>
<tr>
<td>pidfile</td>
<td>/var/run/haproxy.pid</td>
<td>haproxy 的 pid 存放路径，启动进程的用户必须有权限访问此文件</td>
</tr>
</tbody></table>
<h3 id="默认全局配置（defaults）"><a href="#默认全局配置（defaults）" class="headerlink" title="默认全局配置（defaults）"></a>默认全局配置（defaults）</h3><p>这些参数可以被利用配置到frontend，backend，listen组件</p>
<p>option 参数可以同时配置多个</p>
<p>balance 只可配置一个*</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>参数名</th>
<th>值</th>
<th>参数含义</th>
</tr>
</thead>
<tbody><tr>
<td>log</td>
<td>global</td>
<td></td>
</tr>
<tr>
<td>mode</td>
<td>http</td>
<td>所处理的类别 (#七层:http;四层:tcp )</td>
</tr>
<tr>
<td>maxconn</td>
<td>20480</td>
<td>最大连接数</td>
</tr>
<tr>
<td>option</td>
<td>httplog</td>
<td>日志类别为 http 日志格式</td>
</tr>
<tr>
<td>option</td>
<td>httpclose</td>
<td>每次请求完毕后主动关闭 http 通道</td>
</tr>
<tr>
<td>option</td>
<td>dontlognull</td>
<td>不记录健康检查的日志信息</td>
</tr>
<tr>
<td>option</td>
<td>forwardfor</td>
<td>记录客户端 IP 在 X-Forwarded-For 头域中，用以获取客户端真实 ip</td>
</tr>
<tr>
<td>option</td>
<td>redispatch</td>
<td>serverId 对应的服务器挂掉后，强制定向到其他健康的服务器</td>
</tr>
<tr>
<td>option</td>
<td>abortonclose</td>
<td>当服务器负载很高的时候，自动结束掉当前队列处理比较久的连接</td>
</tr>
<tr>
<td>stats refresh</td>
<td>30</td>
<td>统计页面刷新间隔</td>
</tr>
<tr>
<td>retries</td>
<td>3</td>
<td>3次连接失败就认为服务不可用，也可以通过后面设置</td>
</tr>
<tr>
<td>balance</td>
<td>roundrobin</td>
<td>默认的负载均衡的方式，轮询方式</td>
</tr>
<tr>
<td>balance</td>
<td>source</td>
<td>默认的负载均衡的方式，类似 nginx 的 ip_hash</td>
</tr>
<tr>
<td>balance</td>
<td>leastconn</td>
<td>默认的负载均衡的方式，最小连接</td>
</tr>
<tr>
<td>timeout connect</td>
<td>5000ms</td>
<td>连接 server 端超时 5s</td>
</tr>
<tr>
<td>timeout client</td>
<td>50000ms</td>
<td>客户端响应超时 50s</td>
</tr>
<tr>
<td>timeout server</td>
<td>50000ms</td>
<td>server 端响应超时 50s</td>
</tr>
<tr>
<td>timeout check</td>
<td>2000</td>
<td>心跳检测超时时间</td>
</tr>
</tbody></table>
<h3 id="监控页面的设置"><a href="#监控页面的设置" class="headerlink" title="监控页面的设置"></a>监控页面的设置</h3><h4 id="listen-的配置参数"><a href="#listen-的配置参数" class="headerlink" title="listen 的配置参数"></a>listen 的配置参数</h4><table>
<thead>
<tr>
<th>参数名</th>
<th>值</th>
<th>参数含义</th>
</tr>
</thead>
<tbody><tr>
<td>listen</td>
<td>listen_demo</td>
<td>监控组名称，是 Frontend 和 Backend 的组合体</td>
</tr>
<tr>
<td>bind</td>
<td>0.0.0.0:65532</td>
<td>供外部访问的地址及端口</td>
</tr>
<tr>
<td>mode</td>
<td>http</td>
<td>代理模式</td>
</tr>
<tr>
<td>log</td>
<td>127.0.0.1 local3 err</td>
<td>错误日志记录</td>
</tr>
</tbody></table>
<p>HTTP 模式的相关设置</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>值</th>
<th>参数含义</th>
</tr>
</thead>
<tbody><tr>
<td>stats refresh</td>
<td>5s</td>
<td>监控页自动刷新时间</td>
</tr>
<tr>
<td>stats uri</td>
<td>/admin?stats</td>
<td>监控页的地址</td>
</tr>
<tr>
<td>stats realm</td>
<td>/info</td>
<td>监控面的提示信息</td>
</tr>
<tr>
<td>stats auth</td>
<td>admin:admin</td>
<td>监控页鉴权，可以同时设置多个用户</td>
</tr>
<tr>
<td>stats</td>
<td>hide-version</td>
<td>隐藏统计页面上的 HAproxy 版本信息</td>
</tr>
<tr>
<td>errorfile 403</td>
<td>/etc/haproxy/errorfiles/403.http</td>
<td></td>
</tr>
<tr>
<td>errorfile 500</td>
<td>/etc/haproxy/errorfiles/500.http</td>
<td></td>
</tr>
<tr>
<td>errorfile 502</td>
<td>/etc/haproxy/errorfiles/502.http</td>
<td></td>
</tr>
<tr>
<td>errorfile 503</td>
<td>/etc/haproxy/errorfiles/503.http</td>
<td></td>
</tr>
<tr>
<td>errorfile 504</td>
<td>/etc/haproxy/errorfiles/504.http</td>
<td></td>
</tr>
</tbody></table>
<h4 id="frontend-的配置参数"><a href="#frontend-的配置参数" class="headerlink" title="frontend 的配置参数"></a>frontend 的配置参数</h4><table>
<thead>
<tr>
<th>参数名</th>
<th>值</th>
<th>参数含义</th>
</tr>
</thead>
<tbody><tr>
<td>frontend</td>
<td>frontend_name</td>
<td></td>
</tr>
<tr>
<td>bind</td>
<td>0.0.0.0:1080</td>
<td>供外部访问的地址及端口</td>
</tr>
<tr>
<td>mode</td>
<td>http</td>
<td></td>
</tr>
<tr>
<td>log</td>
<td>global</td>
<td>应用全局的日志配置</td>
</tr>
<tr>
<td>option</td>
<td>httplog</td>
<td>启用 http 的 log</td>
</tr>
<tr>
<td>option</td>
<td>httpclose</td>
<td>每次请求完毕后主动关闭 http 通道，<code>HA-Proxy</code> 不支持 keep-alive 模式</td>
</tr>
<tr>
<td>option</td>
<td>forwardfor</td>
<td>如果后端服务器需要获得客户端的真实 IP 需要配置次参数，将可以从 Http Header 中获得客户端 IP</td>
</tr>
<tr>
<td>default_backend</td>
<td>servers</td>
<td>请求转发至名为 <code>servers</code> 的后端服务</td>
</tr>
</tbody></table>
<h4 id="backend-的配置参数"><a href="#backend-的配置参数" class="headerlink" title="backend 的配置参数"></a>backend 的配置参数</h4><table>
<thead>
<tr>
<th>参数名</th>
<th>值</th>
<th>参数含义</th>
</tr>
</thead>
<tbody><tr>
<td>backend</td>
<td>servers</td>
<td>后端服务名，可自定义</td>
</tr>
<tr>
<td>mode</td>
<td>http</td>
<td></td>
</tr>
<tr>
<td>balance</td>
<td>roundrobin</td>
<td>负载均衡，轮询方式</td>
</tr>
<tr>
<td>option</td>
<td>httpchk GET /index.html</td>
<td>启动心跳检测的地址</td>
</tr>
<tr>
<td>server</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>backend 中 server 的参数</p>
<ul>
<li>server web1 192.168.11.2:80 check inter 1500 rise 3 fall 3 weight 1</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>值</th>
<th>参数含义</th>
</tr>
</thead>
<tbody><tr>
<td>server</td>
<td>server1</td>
<td>server 名</td>
</tr>
<tr>
<td>check</td>
<td>inter 1500</td>
<td>心跳检测频率</td>
</tr>
<tr>
<td>rise</td>
<td>3</td>
<td>3 次正确认为服务器可用</td>
</tr>
<tr>
<td>fall</td>
<td>3</td>
<td>3 次失败认为服务器不可用</td>
</tr>
<tr>
<td>weight</td>
<td>2</td>
<td>代表权重如果检查失败会自动踢掉该服务器</td>
</tr>
</tbody></table>
<h2 id="配置自由的时间单位"><a href="#配置自由的时间单位" class="headerlink" title="配置自由的时间单位"></a>配置自由的时间单位</h2><p>一些参数涉及表示时间的值，例如超时。这些值通常以毫秒表示（除非有特殊说明），但可以通过改变后缀单位来改变这些值。</p>
<p>支持的单位是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- us : microseconds. 1 microsecond = 1/1000000 second</span><br><span class="line">- ms : milliseconds. 1 millisecond = 1/1000 second. This is the default.</span><br><span class="line">- s  : seconds. 1s = 1000ms</span><br><span class="line">- m  : minutes. 1m = 60s = 60000ms</span><br><span class="line">- h  : hours.   1h = 60m = 3600s = 3600000ms</span><br><span class="line">- d  : days.    1d = 24h = 1440m = 86400s = 86400000ms</span><br></pre></td></tr></table></figure>

<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改配置并重启</span><br><span class="line">sudo vi /etc/haproxy/haproxy.cfg</span><br><span class="line">haproxy -c -f /etc/haproxy/haproxy.cfg</span><br><span class="line">sudo service haproxy restart</span><br><span class="line"></span><br><span class="line"># 设置权重</span><br><span class="line">echo &#x27;set weight read_only-back/slave1 0&#x27; | sudo socat stdio /run/haproxy/admin.sock</span><br><span class="line"></span><br><span class="line">echo &#x27;set server read_only-back/slave1 agent up&#x27; | sudo socat stdio /run/haproxy/admin.sock</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<hr>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p><a href="http://cbonte.github.io/haproxy-dconv/">HAProxy 各版本官方文档</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Haproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Haproxy 之 Http 代理的两种方式</title>
    <url>/blog/2019/04/30/haproxy-listen-vs-frontend/</url>
    <content><![CDATA[<h2 id="listen-与-frontend-backend-的配置区别"><a href="#listen-与-frontend-backend-的配置区别" class="headerlink" title="listen 与 (frontend + backend) 的配置区别"></a>listen 与 (frontend + backend) 的配置区别</h2><h3 id="frontend-backend-的配置示例及运行流程"><a href="#frontend-backend-的配置示例及运行流程" class="headerlink" title="frontend + backend 的配置示例及运行流程"></a>frontend + backend 的配置示例及运行流程</h3><p>这是一个 HTTP 代理在所有接口上监听端口 80 的简单配置，请求进入后的运行流程如下：</p>
<ol>
<li><code>frontend</code> 监听 80 端口</li>
<li>请求被 <code>frontend</code> 转发到 <code>backend</code> 的 servers 中</li>
<li>请求进入运行在 127.0.0.1:8000 的 server1 中</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Simple configuration for an HTTP proxy listening on port 80 on all</span><br><span class="line"># interfaces and forwarding requests to a single backend &quot;servers&quot; with a</span><br><span class="line"># single server &quot;server1&quot; listening on 127.0.0.1:8000</span><br><span class="line"></span><br><span class="line">global</span><br><span class="line">daemon</span><br><span class="line">maxconn 256</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">mode http</span><br><span class="line">timeout connect 5000ms</span><br><span class="line">timeout client 50000ms</span><br><span class="line">timeout server 50000ms</span><br><span class="line"></span><br><span class="line">frontend http-in</span><br><span class="line">bind *:80</span><br><span class="line">default_backend servers</span><br><span class="line"></span><br><span class="line">backend servers</span><br><span class="line">server server1 127.0.0.1:8000 maxconn 32</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="listen-的配置示例及运行流程"><a href="#listen-的配置示例及运行流程" class="headerlink" title="listen 的配置示例及运行流程"></a>listen 的配置示例及运行流程</h3><p>使用单个 <code>listen</code> 块定义的相同配置。更精简但不那么富有表现力，尤其是在HTTP模式下。</p>
<ol>
<li>请求进入 80 端口</li>
<li>转发入运行在 127.0.0.1:8000 的 server1 中</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The same configuration defined with a single listen block. Shorter but</span><br><span class="line"># less expressive, especially in HTTP mode.</span><br><span class="line"></span><br><span class="line">global</span><br><span class="line">daemon</span><br><span class="line">maxconn 256</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">mode http</span><br><span class="line">timeout connect 5000ms</span><br><span class="line">timeout client 50000ms</span><br><span class="line">timeout server 50000ms</span><br><span class="line"></span><br><span class="line">listen http-in</span><br><span class="line">bind *:80</span><br><span class="line">server server1 127.0.0.1:8000 maxconn 32</span><br></pre></td></tr></table></figure>


<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改配置并重启</span><br><span class="line">sudo vi /etc/haproxy/haproxy.cfg</span><br><span class="line">haproxy -c -f /etc/haproxy/haproxy.cfg</span><br><span class="line">sudo service haproxy restart</span><br><span class="line"></span><br><span class="line"># 设置权重</span><br><span class="line">echo &#x27;set weight read_only-back/slave1 0&#x27; | sudo socat stdio /run/haproxy/admin.sock</span><br><span class="line"></span><br><span class="line">echo &#x27;set server read_only-back/slave1 agent up&#x27; | sudo socat stdio /run/haproxy/admin.sock</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p><a href="http://cbonte.github.io/haproxy-dconv/">HAProxy 各版本官方文档</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Haproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>mac下的hexo安装出现异常</title>
    <url>/blog/2017/06/22/hexo-installation-error-on-mac/</url>
    <content><![CDATA[<p>将hexo从win迁移到mac时发生了安装错误。</p>
<p>没有保留报错截图，就从日志文件中截取了关键段落。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">5751 error code ELIFECYCLE</span><br><span class="line">5752 error errno 1</span><br><span class="line">5753 error hexo-util@0.6.0 postinstall: `npm run build:highlight`</span><br><span class="line">5753 error Exit status 1</span><br><span class="line">5754 error Failed at the hexo-util@0.6.0 postinstall script.</span><br><span class="line">5754 error This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">5755 verbose exit [ 1, true ]</span><br></pre></td></tr></table></figure>

<p>按照网上的几种解法都没能完成安装</p>
<blockquote>
<p>sudo npm install -g hexo-cli</p>
<p>sudo npm install hexo –no-optional</p>
<p>sudo npm install -g hexo-cli –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
</blockquote>
<p>最后尝试进入root权限中执行npm命令，即</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -s</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装成功。</p>
<span id="more"></span>
<p>若不知道如何退出root权限，可以使用以下任意一个命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">logout</span><br><span class="line">ctrl+D</span><br></pre></td></tr></table></figure>



<p>启动hexo后又出现了新的报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123; Error: Cannot find module &#x27;./build/Release/DTraceProviderBindings&#x27;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:485:15)</span><br><span class="line">    at Function.Module._load (module.js:437:25)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32)</span><br><span class="line">    at tryModuleLoad (module.js:466:12)</span><br><span class="line">    at Function.Module._load (module.js:458:3)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32) code: &#x27;MODULE_NOT_FOUND&#x27; &#125;</span><br><span class="line">&#123; Error: Cannot find module &#x27;./build/default/DTraceProviderBindings&#x27;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:485:15)</span><br><span class="line">    at Function.Module._load (module.js:437:25)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32)</span><br><span class="line">    at tryModuleLoad (module.js:466:12)</span><br><span class="line">    at Function.Module._load (module.js:458:3)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32) code: &#x27;MODULE_NOT_FOUND&#x27; &#125;</span><br><span class="line">&#123; Error: Cannot find module &#x27;./build/Debug/DTraceProviderBindings&#x27;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:485:15)</span><br><span class="line">    at Function.Module._load (module.js:437:25)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32)</span><br><span class="line">    at tryModuleLoad (module.js:466:12)</span><br><span class="line">    at Function.Module._load (module.js:458:3)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32) code: &#x27;MODULE_NOT_FOUND&#x27; &#125;</span><br><span class="line">(node:3413) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br></pre></td></tr></table></figure>



<p>虽不影响使用却看着难受，然而并没有找到能解决它的方法</p>
<p>╮(╯▽╰)╭</p>
<p>能找到的依旧是这条命令，无非是重装hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo --no-optional</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Click 如何调用 Command 函数并取得返回值</title>
    <url>/blog/2019/05/30/how-to-get-return-of-python-click-command/</url>
    <content><![CDATA[<p>在项目的演进过程中，都会经历项目需求从少至多，由简单到复杂的过程。在这个不停追加的过程中，项目结构也会从一个小脚本就能搞定变化到需要由几个小脚本配合共同支撑，项目的代码也会从精简干练慢慢变到冗余、重合度高。</p>
<p>这时候，为了让项目结构更加稳健，易用性更高，可读性更好，是需要重建程序入口，把脚本工程化的。</p>
<p>看起来很复杂，实际上就是在项目演进的不同阶段适时地重构，每个优秀的项目都是经过千（多）锤（次）百（重）炼（构）才能形成的。</p>
<p>今天就从程序的入口开始，记录一次改造。（中间省略 1000 字为重构的细节及方法…）</p>
<p>在最初的版本，程序入口直接使用了简单粗暴的 if - else，带来的问题就是，无论如何封装抽象，都无法改变可读性极差的结果。于是在无力演进的情况下，选择一款 CLI 构建工具，提高可持续性，防止自己重造车轮。</p>
<h1 id="CLI-构建工具-Click"><a href="#CLI-构建工具-Click" class="headerlink" title="CLI 构建工具 Click"></a>CLI 构建工具 Click</h1><p><code>Click</code> 的基础使用方法和高级特性都可以从<a href="https://click.palletsprojects.com/en/7.x/options/#name-your-options">官方文档</a>获取</p>
<p>以下谨记录个人使用到的，以及我认为最常用的操作。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>夏天来了，案例使用了冰淇淋，这样看起来会清凉一些。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.group()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_group</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--brand&#x27;</span>, default=<span class="number">1</span>, prompt=<span class="string">&#x27;请选择品牌：1.和路雪 2.雀巢 3.五羊 4.其它&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;小卖部品牌分类：1.和路雪 2.雀巢 3.五羊 4.其它&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--category&#x27;</span>, default=<span class="number">1</span>, prompt=<span class="string">&#x27;请选择类别：1.雪糕 2.冰棍 3.杯装&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;冰淇淋类别：1.雪糕 2.冰棍 3.杯装&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ice_cream_selection</span>(<span class="params">brand, category</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;冰淇淋订购程序&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(brand, category)</span><br><span class="line">    <span class="keyword">if</span> category == <span class="number">3</span>:</span><br><span class="line">        result = taste_selection()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finished!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--selected&#x27;</span>, default=<span class="number">0</span>, prompt=<span class="string">&#x27;请选择口味：1.香草味 2.巧克力味&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">taste_selection</span>(<span class="params">selected</span>):</span></span><br><span class="line">    <span class="keyword">return</span> click.echo(selected)</span><br><span class="line"></span><br><span class="line">test_group.add_command(ice_cream_selection)</span><br><span class="line">test_group.add_command(taste_selection)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ice_cream_selection()</span><br><span class="line">    <span class="comment">#test_group()</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>从上面的案例简单讲解使用方法</p>
<blockquote>
<p>@click.command()</p>
</blockquote>
<p>将函数注册为 <code>Click</code> 识别的命令</p>
<blockquote>
<p>@click.option</p>
</blockquote>
<p><code>option</code> 为高度定制该命令的模块</p>
<ul>
<li><code>&#39;--brand&#39;</code> 此处声明变量，将会接收来自输入的数据</li>
<li><code>default</code> 给予变量默认值</li>
<li><code>prompt</code> 若没有在启动程序时传入该变量，则会在后续作为输入的提示</li>
<li><code>help</code> 在 –help 时输出的帮助文本</li>
</ul>
<p>让我们运行一下上面的程序试试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/project/click-test$ python3 test.py </span><br><span class="line">请选择品牌：1.和路雪 2.雀巢 3.五羊 4.其它 [1]: </span><br><span class="line">请选择类别：1.雪糕 2.冰棍 3.杯装 [1]: 3</span><br><span class="line">1 3</span><br><span class="line">请选择口味：1.香草味 2.巧克力味 [0]: 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>执行的路径和预期中一样，因为没有传入变量参数，所以需要按照预先设定好的 prompt 的提示填充变量。</p>
<p>再看看帮助功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/project/click-test$ python3 test.py --help</span><br><span class="line">Usage: test.py [OPTIONS]</span><br><span class="line"></span><br><span class="line">  冰淇淋订购程序</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --brand INTEGER     小卖部品牌分类：1.和路雪 2.雀巢 3.五羊 4.其它</span><br><span class="line">  --category INTEGER  冰淇淋类别：1.雪糕 2.冰棍 3.杯装</span><br><span class="line">  --help              Show this message and exit.</span><br></pre></td></tr></table></figure>



<h2 id="建立组并集合子模块"><a href="#建立组并集合子模块" class="headerlink" title="建立组并集合子模块"></a>建立组并集合子模块</h2><p>为了方便演示，<code>command</code> 写在同一段伪代码里。</p>
<p>更好的使用方式是，将不同的 <code>command</code> 分布在不同的项目层次、不同的文件夹中，再使用 <code>import</code> 引入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test_group.py</span></span><br><span class="line"><span class="meta">@click.group()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_group</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处省略 command 的定义</span></span><br><span class="line"></span><br><span class="line">test_group.add_command(ice_cream_selection)</span><br><span class="line">test_group.add_command(taste_selection)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test_group()</span><br></pre></td></tr></table></figure>

<p><code>click.group</code> 链接子模块就是这么简单，但是运行的方式会有些不同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果你编写 setup.py 并已安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> test_group ice_cream_selection --xxx xx --yyy yy</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者你还在调试</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 test_group.py ice_cream_selection --xxx xx --yyy yy</span></span><br></pre></td></tr></table></figure>



<h2 id="模块调用模块后如何获取返回值"><a href="#模块调用模块后如何获取返回值" class="headerlink" title="模块调用模块后如何获取返回值"></a>模块调用模块后如何获取返回值</h2><p>这是困扰了很久的问题，在程序执行总是会经历需要多重判断，获取一级类目下细分类目的情况，所以返回细分类目给上层倒是个需要的功能。</p>
<p>然而 <code>Click</code> 并不支持直接返回参数，就像下面这个案例一样，调用了 taste_selection 后，是无法取得选中的口味的！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--selected&#x27;</span>, default=<span class="number">0</span>, prompt=<span class="string">&#x27;请选择口味：1.香草味 2.巧克力味&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">taste_selection</span>(<span class="params">selected</span>):</span></span><br><span class="line">    <span class="keyword">return</span> selected</span><br></pre></td></tr></table></figure>

<p>经过一番苦痛折磨，甚至尝试引入上下文 <code>context</code> 的方式，依旧无法获取返回值。</p>
<p>直到看到 Stackoverflow 上的这个回答：<a href="https://stackoverflow.com/a/28814379">How do I return a value when @click.option is used to pass a command line argument to a function?</a></p>
<p>该回答下的另一个答主 <a href="https://stackoverflow.com/users/908494/abarnert">abarnert</a> 则给出了为何取不到 Click 返回值的解释：</p>
<blockquote>
<p><code>click</code> is trying to make your function into a good command-line citizen, so when you exit your function, it calls <code>sys.exit</code> with the appropriate number (0 if you <code>return</code>, 1 if you <code>raise</code>, and 2 if it failed to parse your arguments). </p>
<p>What programs usually do when they need to “return” text is to print it to standard output, which is exactly what <code>click.echo</code> is for.</p>
</blockquote>
<p>因此，上面的返回只需要用 <code>Click</code> 的标准输出函数封装，即可取得相应的值。</p>
<ul>
<li>click.echo(selected)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--selected&#x27;</span>, default=<span class="number">0</span>, prompt=<span class="string">&#x27;请选择口味：1.香草味 2.巧克力味&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">taste_selection</span>(<span class="params">selected</span>):</span></span><br><span class="line">    <span class="keyword">return</span> click.echo(selected)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Click</tag>
      </tags>
  </entry>
  <entry>
    <title>Impala 优化之统计数据预存储「compute stats」</title>
    <url>/blog/2018/11/12/impala-compute-stats/</url>
    <content><![CDATA[<p>由于大表关联，分析同学的执行操作要得出结果往往需要好几分钟，这在千万级、亿级数据量的表之间关联得出结果，不能说是很慢，但是依旧有着可提升的空间。</p>
<h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>在 <code>Impala</code> 中，有一个神秘指令，COMPUTE STATS</p>
<p>它可以预先分析表和列的的结构，并将其存储在元数据中。等到执行查询的时候， <code>Impala</code> 便会根据存储的元数据做出相应的查询优化。</p>
<p>也就是下面这条语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COMPUTE STATS t1;</span><br></pre></td></tr></table></figure>



<h3 id="执行前"><a href="#执行前" class="headerlink" title="执行前"></a>执行前</h3><blockquote>
<p>show table stats t1;</p>
</blockquote>
<table>
<thead>
<tr>
<th>#Rows</th>
<th>#Files</th>
<th>Size</th>
<th>Bytes Cached</th>
<th>Cache Replication</th>
<th>Format</th>
<th>Incremental stats</th>
<th>Location</th>
</tr>
</thead>
<tbody><tr>
<td>-1</td>
<td>4</td>
<td>1.72GB</td>
<td>NOT CACHED</td>
<td>NOT CACHED</td>
<td>PARQUET</td>
<td>false</td>
<td>hdfs://nameservice1/user/hive/warehouse/t1</td>
</tr>
</tbody></table>
<blockquote>
<p>show column stats t1;</p>
</blockquote>
<table>
<thead>
<tr>
<th>Column</th>
<th>Type</th>
<th>#Distinct Values</th>
<th>#Nulls</th>
<th>Max Size</th>
<th>Avg Size</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>BIGINT</td>
<td>-1</td>
<td>-1</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>type</td>
<td>INT</td>
<td>-1</td>
<td>-1</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>uid</td>
<td>BIGINT</td>
<td>-1</td>
<td>-1</td>
<td>8</td>
<td>8</td>
</tr>
</tbody></table>
<h3 id="执行后"><a href="#执行后" class="headerlink" title="执行后"></a>执行后</h3><blockquote>
<p>show table stats t1;</p>
</blockquote>
<table>
<thead>
<tr>
<th>#Rows</th>
<th>#Files</th>
<th>Size</th>
<th>Bytes Cached</th>
<th>Cache Replication</th>
<th>Format</th>
<th>Incremental stats</th>
<th>Location</th>
</tr>
</thead>
<tbody><tr>
<td>32233129</td>
<td>4</td>
<td>1.72GB</td>
<td>NOT CACHED</td>
<td>NOT CACHED</td>
<td>PARQUET</td>
<td>false</td>
<td>hdfs://nameservice1/user/hive/warehouse/t1</td>
</tr>
</tbody></table>
<blockquote>
<p>show column stats t1;</p>
</blockquote>
<table>
<thead>
<tr>
<th>Column</th>
<th>Type</th>
<th>#Distinct Values</th>
<th>#Nulls</th>
<th>Max Size</th>
<th>Avg Size</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>BIGINT</td>
<td>45300013</td>
<td>0</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>type</td>
<td>INT</td>
<td>14</td>
<td>0</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>uid</td>
<td>BIGINT</td>
<td>2831250</td>
<td>0</td>
<td>8</td>
<td>8</td>
</tr>
</tbody></table>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从上面的表格可以看出，<code>compute stats</code> 为我们缓存了几个较为常用的 count 值，不要小看这几个值。</p>
<p>在大型连表查询中，相比未经过 <code>compute stats</code> 优化的速度提升是几倍甚至十几倍，而相对 hive 的相同查询操作，速度差距将会达到几十倍。</p>
<h2 id="Hive-依然适用"><a href="#Hive-依然适用" class="headerlink" title="Hive 依然适用"></a>Hive 依然适用</h2><p>如果想在 hive 中执行，Impala 中查询，也可在 Hive 中执行操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ANALYZE TABLE Table1 COMPUTE STATISTICS;</span><br><span class="line">ANALYZE TABLE Table1 COMPUTE STATISTICS FOR COLUMNS;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p><a href="https://www.cloudera.com/documentation/enterprise/5-9-x/topics/impala_compute_stats.html">COMPUTE STATS Statement</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Impala</tag>
      </tags>
  </entry>
  <entry>
    <title>两个栈实现一个队列</title>
    <url>/blog/2017/05/25/implement-queue-by-two-stacks/</url>
    <content><![CDATA[<p>今天下午汉得来学校宣讲，笔试中看到这样一个题目，让我们用两个栈实现一个队列。</p>
<p>那时候没想太多，队列先进先出，栈先进后出，那么只要一个栈作为主栈，另一个栈作为缓存栈，来回倒腾就能实现队列的功能了。</p>
<p><img src="/images/two-stacks-operation.jpg"></p>
<p>回来后仔细想想，其实还有比这更高效的方法。<span id="more"></span>也就是保留主栈的栈底元素，弹出即可，这样可以减少一次压栈操作。</p>
<p>顺便用代码实现了一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">入队时将元素压入栈1。</span></span><br><span class="line"><span class="comment">出队时先判断栈2是否为空，若不为空则直接弹出栈2的栈顶元素。若为空，则将栈1除了栈底的元素弹出并压入栈2，然后弹出栈1的元素再将栈2的元素弹出并压回栈1即可。</span></span><br><span class="line"><span class="comment">这样做的好处是可以减少一次压栈的操作，并且考虑了没有元素可出队的异常处理。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackToQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack1;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackToQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">       stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果栈1不为空，且栈1所剩元素大于1，则将栈1出栈并压入栈2</span></span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">        	<span class="keyword">if</span>(<span class="number">1</span>==stack.size())</span><br><span class="line">        		<span class="keyword">break</span>;</span><br><span class="line">        	stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将栈1的元素出栈，即出队。</span></span><br><span class="line">        <span class="keyword">int</span> top = stack1.pop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果栈2不为空，将栈2中的元素出栈并压回栈1中</span></span><br><span class="line">        <span class="keyword">while</span>(!stack2.isEmpty())&#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Graphite 之把它装起来</title>
    <url>/blog/2018/11/29/install-graphite/</url>
    <content><![CDATA[<p>Graphite 是一款时序数据库</p>
<h1 id="初步安装"><a href="#初步安装" class="headerlink" title="初步安装"></a>初步安装</h1><p>安装 <code>Graphite</code> 有 n 种方法，在下选用的是 <code>pip</code> 安装的方式，使用默认安装位置 <code>/opt/graphite</code></p>
<p>十分简单，只需要分别安装三个组件 <code>graphite-web</code> 、 <code>whisper</code> 、 <code>carbon</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PYTHONPATH=<span class="string">&quot;/opt/graphite/lib/:/opt/graphite/webapp/&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install --no-binary=:all: https://github.com/graphite-project/whisper/tarball/master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install --no-binary=:all: https://github.com/graphite-project/carbon/tarball/master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install --no-binary=:all: https://github.com/graphite-project/graphite-web/tarball/master</span></span><br></pre></td></tr></table></figure>

<p>如果你希望自己指定安装位置：<a href="https://graphite.readthedocs.io/en/latest/install-pip.html#">Installing From Pip</a></p>
<span id="more"></span>

<h2 id="安装过程中可能出现的问题"><a href="#安装过程中可能出现的问题" class="headerlink" title="安装过程中可能出现的问题"></a>安装过程中可能出现的问题</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install --no-binary=:all: https://github.com/graphite-project/graphite-web/tarball/master</span></span><br></pre></td></tr></table></figure>

<p>在执行第三条语句的时候</p>
<p>duang!!!</p>
<blockquote>
<p>distutils.errors.CompileError: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1</p>
<p>……</p>
<p>distutils.errors.DistutilsError: Setup script exited with error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1</p>
</blockquote>
<p>执行下面语句方可药到病除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libpq-dev python-dev libxml2-dev libxslt1-dev libldap2-dev libsasl2-dev libffi-dev</span></span><br></pre></td></tr></table></figure>



<h1 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h1><h2 id="修改-webapp-元数据库"><a href="#修改-webapp-元数据库" class="headerlink" title="修改 webapp 元数据库"></a>修改 webapp 元数据库</h2><p>Django 元数据默认存储在 SQLite 中，但为了更好的扩展性，在下把它放到 mysql 中</p>
<blockquote>
<p>If running multiple Graphite-web instances, a database such as PostgreSQL or MySQL is required so that all instances may share the same data source.</p>
</blockquote>
<h3 id="为-Graphite-添加数据库账号"><a href="#为-Graphite-添加数据库账号" class="headerlink" title="为 Graphite 添加数据库账号"></a>为 Graphite 添加数据库账号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database graphite;</span><br><span class="line">mysql&gt;  grant all on graphitedb.* to &#x27;graphite&#x27;@&#x27;%&#x27; identified by &#x27;graphitepass&#x27;;</span><br><span class="line">mysql&gt;  grant all on graphitedb.* to &#x27;graphite&#x27;@&#x27;localhost&#x27; identified by &#x27;graphitepass&#x27;;</span><br></pre></td></tr></table></figure>



<h3 id="添加（修改）database-配置"><a href="#添加（修改）database-配置" class="headerlink" title="添加（修改）database 配置"></a>添加（修改）database 配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/graphite/webapp/graphite</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp local_settings.py.example local_settings.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi local_settings.py</span></span><br></pre></td></tr></table></figure>

<p>数据库配置的格式可参考 <a href="https://docs.djangoproject.com/en/dev/ref/settings/#databases">django 文档</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;NAME&#x27;: &#x27;graphite&#x27;,</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,</span><br><span class="line">        &#x27;USER&#x27;: &#x27;graphite&#x27;,</span><br><span class="line">        &#x27;PASSWORD&#x27;: &#x27;graphitepass&#x27;,</span><br><span class="line">        &#x27;HOST&#x27;: &#x27;localhost&#x27;,</span><br><span class="line">        &#x27;PORT&#x27;: &#x27;3306&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 记得提前建库</p>
</blockquote>
<h3 id="重新初始化元数据"><a href="#重新初始化元数据" class="headerlink" title="重新初始化元数据"></a>重新初始化元数据</h3><p>修改了数据库配置之后，需要在 Mysql 中重新初始化元数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PYTHONPATH=$GRAPHITE_ROOT/webapp django-admin.py migrate --settings=graphite.settings --run-syncdb</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：需将 <code>$GRAPHITE_ROOT</code> 替换为你的安装位置，如果是默认安装则为 <code>/opt/graphite</code></p>
</blockquote>
<h2 id="开始配置-Webapp"><a href="#开始配置-Webapp" class="headerlink" title="开始配置 Webapp"></a>开始配置 Webapp</h2><p>为了让服务器达到高可用、高性能，我们选用 nginx + wsgi，官方提供了三种方案</p>
<ul>
<li>nginx + gunicorn</li>
<li>Apache + mod_wsgi</li>
<li>Nginx + uWSGI</li>
</ul>
<p>此处我们选用第一个方案 nginx + gunicorn</p>
<p>使用这套组合只是为了让 python 下的 web 服务更加健壮，nginx 负责负载均衡、缓存请求等功能，而 gunicorn 负责接收来自 nginx 的动态请求，处理后返回给 nginx，再由 nginx 返回给用户。</p>
<h3 id="安装-Gunicorn"><a href="#安装-Gunicorn" class="headerlink" title="安装 Gunicorn"></a>安装 Gunicorn</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install gunicorn</span></span><br></pre></td></tr></table></figure>



<h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install nginx</span></span><br></pre></td></tr></table></figure>



<h4 id="为-Graphite-配置特定的日志文件"><a href="#为-Graphite-配置特定的日志文件" class="headerlink" title="为 Graphite 配置特定的日志文件"></a>为 Graphite 配置特定的日志文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo touch /var/<span class="built_in">log</span>/nginx/graphite.access.log</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo touch /var/<span class="built_in">log</span>/nginx/graphite.error.log</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 640 /var/<span class="built_in">log</span>/nginx/graphite.*</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown user:user /var/<span class="built_in">log</span>/nginx/graphite.*</span></span><br></pre></td></tr></table></figure>



<h4 id="定制-Graphite-配置文件"><a href="#定制-Graphite-配置文件" class="headerlink" title="定制 Graphite 配置文件"></a>定制 Graphite 配置文件</h4><blockquote>
<p>vi /etc/nginx/sites-available/graphite</p>
</blockquote>
<p>内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream graphite &#123;</span><br><span class="line">    server 127.0.0.1:8080 fail_timeout=0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    root /opt/graphite/webapp;</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/graphite.access.log;</span><br><span class="line">    error_log  /var/log/nginx/graphite.error.log;</span><br><span class="line"></span><br><span class="line">    location = /favicon.ico &#123;</span><br><span class="line">        return 204;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        alias /opt/graphite/static/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri @graphite;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @graphite &#123;</span><br><span class="line">        proxy_pass_header Server;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Scheme $scheme;</span><br><span class="line">        proxy_connect_timeout 10;</span><br><span class="line">        proxy_read_timeout 10;</span><br><span class="line">        proxy_pass http://graphite;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部分配置需要按部署策略修改，例如 <code>server_name</code> 、<code>root</code> 等</p>
<h4 id="启用配置文件"><a href="#启用配置文件" class="headerlink" title="启用配置文件"></a>启用配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /etc/nginx/sites-available/graphite /etc/nginx/sites-enabled</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -f /etc/nginx/sites-enabled/default</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo service nginx reload</span></span><br></pre></td></tr></table></figure>



<h1 id="启动-Graphite"><a href="#启动-Graphite" class="headerlink" title="启动 Graphite"></a>启动 Graphite</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> PYTHONPATH=/opt/graphite/webapp gunicorn wsgi --workers=4 --<span class="built_in">bind</span>=127.0.0.1:8080 --log-file=/var/<span class="built_in">log</span>/gunicorn.log --preload --pythonpath=/opt/graphite/webapp/graphite &amp;</span></span><br></pre></td></tr></table></figure>

<p>上面的命令会让 graphite 启动在 <code>localhost:8080</code> ，记录日志在 <code>/var/log/gunicorn.log</code> ，并且使用 <code>/opt/graphite/webapp/graphite</code> 座位 webapp 的路径。</p>
<p>由于我们已经在 nginx 中绑定了 8080 端口，所以进入这个地址就 ok 了：<a href="127.0.0.1">127.0.0.1</a></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="修改-Graphite-时区"><a href="#修改-Graphite-时区" class="headerlink" title="修改 Graphite 时区"></a>修改 Graphite 时区</h2><p>如果你需要将时区切到北京时间来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /opt/graphite/webapp/graphite/local_settings.py</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="配置过程中可能出现的问题"><a href="#配置过程中可能出现的问题" class="headerlink" title="配置过程中可能出现的问题"></a>配置过程中可能出现的问题</h2><h3 id="django-core-exceptions-ImproperlyConfigured-Error-loading-MySQLdb-module"><a href="#django-core-exceptions-ImproperlyConfigured-Error-loading-MySQLdb-module" class="headerlink" title="django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module."></a>django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</h3><p>给python3 装上MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install mysqlclient</span><br></pre></td></tr></table></figure>

<p>小声 bb：mysqlclient 查询比 pymysql 快</p>
<h3 id="进入-graphite-web-界面却看见一片空白"><a href="#进入-graphite-web-界面却看见一片空白" class="headerlink" title="进入 graphite web 界面却看见一片空白"></a>进入 graphite web 界面却看见一片空白</h3><p>两种情况</p>
<h4 id="没有找到-static-目录"><a href="#没有找到-static-目录" class="headerlink" title="没有找到 static 目录"></a>没有找到 static 目录</h4><p>注意观察控制台（后台运行则看输出的日志），是否输出类似信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Not Found: /static/img/graphite-logo.png</span><br><span class="line">Not Found: /static/js/ext/adapter/ext/ext-base-debug.js</span><br><span class="line">Not Found: /static/js/ext/resources/css/ext-all.css</span><br><span class="line">Not Found: /static/js/browser.js</span><br><span class="line">Not Found: /static/js/ext/ext-all-debug.js</span><br><span class="line">Not Found: /static/js/composer_widgets.js</span><br><span class="line">Not Found: /static/js/composer.js</span><br><span class="line">Not Found: /static/js/completer.js</span><br><span class="line">Not Found: /static/img/carbon-fiber.png</span><br><span class="line">Not Found: /static/js/browser.js</span><br><span class="line">Not Found: /static/js/composer_widgets.js</span><br><span class="line">Not Found: /static/js/composer.js</span><br><span class="line">Not Found: /static/js/completer.js</span><br></pre></td></tr></table></figure>

<p>如果是，则为寻找不到静态文件</p>
<p>执行下面的命令，注意替换 <code>$GRAPHITE_ROOT</code> 为 graphite 的目录，默认为 <code>/opt/graphite</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> PYTHONPATH=<span class="variable">$GRAPHITE_ROOT</span>/webapp django-admin.py collectstatic --noinput --settings=graphite.settings</span></span><br></pre></td></tr></table></figure>



<p>然后在编辑 nginx 配置，并增加如下配置</p>
<blockquote>
<p>vi /etc/nginx/sites-available/graphite</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /static/ &#123;</span><br><span class="line">    alias /opt/graphite/static/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：上面的修改只有在 nginx 的转发下才可寻找到 static 目录，若不想通过 nginx 访问，参阅下面的文档</p>
</blockquote>
<p>关于 static 目录，官方文档给出了解释：<a href="https://graphite.readthedocs.io/en/latest/config-local-settings.html#filesystem-paths">Filesystem Paths</a></p>
<h4 id="试试打开-debug-模式"><a href="#试试打开-debug-模式" class="headerlink" title="试试打开 debug 模式"></a>试试打开 debug 模式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/graphite/webapp/graphite</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi local_settings.py</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 DEBUG 设为 True</span></span><br><span class="line">DEBUG = True</span><br></pre></td></tr></table></figure>

<p>不明白为啥的同学，可以参考这个 issue：<a href="https://github.com/graphite-project/graphite-web/issues/858">Static Folder Cannot Found</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Graphite</tag>
      </tags>
  </entry>
  <entry>
    <title>从Terminal过渡到Item2</title>
    <url>/blog/2017/11/05/intalled-item2/</url>
    <content><![CDATA[<p>一直听说item2是个比terminal强大的终端工具，为了提升命令行的体验，从teminal切换到了item2。</p>
<h2 id="下载Item2"><a href="#下载Item2" class="headerlink" title="下载Item2"></a>下载Item2</h2><p><a href="https://www.iterm2.com/downloads.html">https://www.iterm2.com/downloads.html</a></p>
<h2 id="设置开启快捷键"><a href="#设置开启快捷键" class="headerlink" title="设置开启快捷键"></a>设置开启快捷键</h2><p>前提是item2在后台运行<br>-&gt; 进入preference(command ,)<br>-&gt; keys<br>-&gt; Hotkeys(左下角) 勾选<code>Show/hide iTerm2 with a system-wide hotkey</code><br>然后就按喜好设置快捷键啦</p>
<h2 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h2><p>可以自定终端背景色或导入现成的配色方案，比如<a href="http://ethanschoonover.com/solarized">Solarized</a><br>跳到Download下载后选择相应的文件导入<br><img src="/images/item2-solarized-setting.png"><br>你可以选择双击’.itermcolors‘文件或在preference -&gt; profiles -&gt; colors -&gt; Color Presets（右下角）-&gt; import… 中导入</p>
<h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><p>osx中默认zsh为4.0版本，可直接切换使用或下载最新的5.0版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>将zsh设置成系统默认shell，以代替bash。 用编辑器打开/etc/shells，在末尾添加/usr/local/bin/zsh,保存关闭。 在终端中执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /usr/<span class="built_in">local</span>/bin/zsh</span><br></pre></td></tr></table></figure>
<p>重启iTerm2</p>
<h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><p>纯傻瓜的方式对zsh进行配置并得到强大的功能，<a href="https://github.com/robbyrussell/oh-my-zsh">官方地址</a><br>curl安装或使用wget</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L http://install.ohmyz.sh | sh</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate http://install.ohmyz.sh -O - | sh</span><br></pre></td></tr></table></figure>
<p>编辑 ~/.zshrc 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span>          <span class="comment"># 使用 agnoster 主题，很好很强大</span></span><br><span class="line">DEFAULT_USER=<span class="string">&quot;你的用户名&quot;</span>     <span class="comment"># 增加这一项，便可以隐藏掉路径前面那串用户名</span></span><br></pre></td></tr></table></figure>

<h2 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h2><p>![](/images/item2_ scrambled.png)<br>装好后可能会出现乱码，这时就需要字体库支持<br>推荐使用powerline <a href="https://github.com/powerline/fonts">https://github.com/powerline/fonts</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/powerline/fonts.git ~/powerline-fonts</span><br><span class="line">source ~/powerline-fonts/install.sh</span><br></pre></td></tr></table></figure>
<p>执行上面两段命令后，会输出这样一行成功提示<br>All Powerline fonts installed to /Users/superdanny/Library/Fonts</p>
<p>回到item2的preference，在profiles -&gt; Text -&gt; Font 中更改字体为 <code>for Powerline</code> 后缀的字体<br>重启item2后乱码问题解决</p>
<h2 id="指令高亮"><a href="#指令高亮" class="headerlink" title="指令高亮"></a>指令高亮</h2><p>输入正确命令显示绿色，错误则为红色(ls为绿，l为红)<br>克隆工程到目录（推荐.zshrc所在目录），并在.zshrc文件末尾加上执行内容（XXX为文件目录）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"></span><br><span class="line">vi ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> XXX/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure>
<p>并且需修改.zshrc中的plugin配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(git zsh-syntax-highlighting) <span class="comment"># 自己按需把要用的 plugin 写上</span></span><br></pre></td></tr></table></figure>



<h2 id="修改vim配色"><a href="#修改vim配色" class="headerlink" title="修改vim配色"></a>修改vim配色</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd solarized</span><br><span class="line">$ cd vim-colors-solarized/colors</span><br><span class="line">$ mkdir -p ~/.vim/colors</span><br><span class="line">$ cp solarized.vim ~/.vim/colors/</span><br><span class="line"></span><br><span class="line">$ vi ~/.vimrc</span><br><span class="line">syntax enable</span><br><span class="line">set background=dark</span><br><span class="line">colorscheme solarized</span><br></pre></td></tr></table></figure>

<h2 id="修改ls配色"><a href="#修改ls配色" class="headerlink" title="修改ls配色"></a>修改ls配色</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi ~/.bash_profile</span><br><span class="line"><span class="built_in">export</span> CLICOLOR=1</span><br></pre></td></tr></table></figure>
<p>修改完.bash_profile需要source .bash_profile</p>
<p>大功告成啦，enjoy it!!</p>
]]></content>
  </entry>
  <entry>
    <title>使用Calendar或DateFormat拆分日期</title>
    <url>/blog/2017/05/28/java-get-time/</url>
    <content><![CDATA[<p>今天碰到获取时间中月份和日期的需求，立马去翻jdk，发现<code>util.Date类</code>中的获取方法竟然在jdk1.1就过期了…<br>于是按着jdk中推荐的<code>Calendar类</code>摸过去，找到方法。但是不知道为什么Date里的get方法不推荐了，找机会一定要瞅一瞅源码(ง๑ •̀_•́)ง</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 使用Calendar实现时间拆解</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public void getTimeByCalendar()&#123;</span></span><br><span class="line"><span class="comment">	Calendar cal = Calendar.getInstance();</span></span><br><span class="line"><span class="comment">	cal.setTime(new Date());//  传入Date对象即可</span></span><br><span class="line"><span class="comment">	int year = cal.get(Calendar.YEAR);// 获取年份</span></span><br><span class="line"><span class="comment">	int month=cal.get(Calendar.MONTH);// 获取月份</span></span><br><span class="line"><span class="comment">	int day=cal.get(Calendar.DATE);// 获取日</span></span><br><span class="line"><span class="comment">	int hour=cal.get(Calendar.HOUR);// 小时</span></span><br><span class="line"><span class="comment">	int minute=cal.get(Calendar.MINUTE);// 分           </span></span><br><span class="line"><span class="comment">	int second=cal.get(Calendar.SECOND);// 秒</span></span><br><span class="line"><span class="comment">	int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);// 一周的第几天</span></span><br><span class="line"><span class="comment">	System.out.println(&quot;现在的时间是：公元&quot;+year+&quot;年&quot;+month+&quot;月&quot;+day+&quot;日      &quot;+hour+&quot;时&quot;+minute+&quot;分&quot;+second+&quot;秒       星期&quot;+dayOfWeek);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>

<p>翻jdk的同时还发现另一种拆分时间的方法，但是没有<code>Calendar</code>自由。</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用DateFormat实现时间拆解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTimeByDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    DateFormat df1 = DateFormat.getDateInstance();<span class="comment">//日期格式，精确到日</span></span><br><span class="line">    DateFormat df2 = DateFormat.getDateTimeInstance();<span class="comment">//可以精确到时分秒</span></span><br><span class="line">    DateFormat df3 = DateFormat.getTimeInstance();<span class="comment">//只显示出时分秒</span></span><br><span class="line">    DateFormat df4 = DateFormat.getDateTimeInstance(DateFormat.FULL,DateFormat.FULL); <span class="comment">//显示日期，周，上下午，时间（精确到秒）</span></span><br><span class="line">    DateFormat df5 = DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG); <span class="comment">//显示日期,上下午，时间（精确到秒）</span></span><br><span class="line">    DateFormat df6 = DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT); <span class="comment">//显示日期，上下午,时间（精确到分）</span></span><br><span class="line">    DateFormat df7 = DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM); <span class="comment">//显示日期，时间（精确到分）</span></span><br><span class="line">    System.out.println(df1.format(date));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我个人是比较喜欢Calendar啦，虽然觉得Date类中的get方法更方便，但毕竟oracle不推荐了，那就算了吧。<br>说来说去不就是为了少写几行代码吗Orz</p>
<hr>
<p>相关链接：<br><a href="http://docs.oracle.com/javase/8/docs/api/index.html">Java™ Platform, Standard Edition 8 API Specification</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决Java Mail下的530错误</title>
    <url>/blog/2017/07/11/java-mail-530-error/</url>
    <content><![CDATA[<p>玩了一下Java Mail，试图使用QQ邮箱作为发送者的邮箱，当然填写在代码中的邮箱密码写的是明文真实密码啦。<br>喜闻乐见的是出现了error 530，这个错误的产生实际上也是腾讯对自己邮箱用户的保护机制啦。其一是谁也不希望自己的产品被克隆。其二是用户异常操作时，找不到操作记录，是不是很扎心？</p>
<p>于是，兜了一大圈，再回到正题上来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javax.mail.AuthenticationFailedException: <span class="number">530</span> Error: <span class="function">A secure connection is <span class="title">requiered</span><span class="params">(such as ssl)</span>. More information at http:<span class="comment">//service.mail.qq.com/cgi-bin/help?id=28</span></span></span><br></pre></td></tr></table></figure>

<p>530报错提示需要一个安全的链接（比如ssl啦stl啦），这里就po一下ssl加密的代码吧。（其实stl也差不多的啦～</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MailSSLSocketFactory sf = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">sf.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">prop.put(<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">prop.put(<span class="string">&quot;mail.smtp.ssl.socketFactory&quot;</span>, sf);</span><br></pre></td></tr></table></figure>
<p>把它加进自己的代码里就阔以啦。<br>当然，邮箱里的POP3/SMTP服务与IMAP/SMTP服务就开起来吧。<br>嗯，还有，为了防止邮箱密码泄漏，腾讯给了每个用户数个登录第三方客户端的授权码，也就是可以当作密码使用的一段16位无序字母组合，那么，玩得开心。</p>
<blockquote>
<p>相关链接<br><a href="http://www.runoob.com/java/java-sending-email.html">关于Java Mail简单粗暴的教程(菜鸟教程)</a><br><a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=371">如何使用 Foxmail 等软件收发邮件？(腾讯)</a><br><a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331">什么是 IMAP，它又是如何设置？(腾讯)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JedisPool报错：Could not return the resource to the pool</title>
    <url>/blog/2018/01/30/jedispool-could-not-return-resource-error/</url>
    <content><![CDATA[<h1 id="Bug的起源和解法"><a href="#Bug的起源和解法" class="headerlink" title="Bug的起源和解法"></a>Bug的起源和解法</h1><p>这个错误来的实在猝不及防，第一次请求可以成功使用<code>JedisPool</code>，而第二次请求便会报错，在翻遍了所有相关博客后一度以为是自己的配置出了错，于是不断修改配置文件中的redis连接池参数。<br>折腾老半天之后，没有帮助TAT<br>这时，我想起10年前的某个午后，蝉鸣的空气中传来的几分安定，出神地趴在窗边看麻雀扑腾的我，被一声厉呵带回现实。之后便到了标准环节–”下课到办公室找我”。之后的事情便记不太清了，只是我深深地记得当时的心境，想不出的问题换个角度想，一定会有不同的发现。<br>那就回归报错吧，“无法将资源返回到池”，再回想到我的jedisPool对象，旷的一声，仿佛天旋地转一般，一切的一切突然都变透彻了。</p>
<h2 id="错误根源及出错原因"><a href="#错误根源及出错原因" class="headerlink" title="错误根源及出错原因"></a>错误根源及出错原因</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">followUser</span><span class="params">(Integer localUserId, Integer userId)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> (Jedis jedis = jedisPool.getResource()) &#123;</span><br><span class="line">    jedis.zadd(localUserId + RedisKey.FOLLOW_USER, System.currentTimeMillis(),</span><br><span class="line">        String.valueOf(userId));</span><br><span class="line">    jedis.zadd(userId + RedisKey.FOLLOWED_USER, System.currentTimeMillis(),</span><br><span class="line">        String.valueOf(localUserId));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (JedisException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  jedisPool.close();<span class="comment">// 问题就出在这里</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JedisPool在configuration类中初始化（项目启动时有spring自动扫描）<br>然而在每个业务类调用完之后就被手动关闭，自然执行完第一次后就不再能取出resource的，也无法return。<br>解决这个bug只需把每个service实现类中的<code>jedisPool.close()</code>删去即可。</p>
<h2 id="为什么会出现这种写法"><a href="#为什么会出现这种写法" class="headerlink" title="为什么会出现这种写法"></a>为什么会出现这种写法</h2><p>说到这个就不得不提起Jedis的wiki<br>官方po出的demo是这样使用jedis的：  </p>
<h3 id="首先引入pom"><a href="#首先引入pom" class="headerlink" title="首先引入pom"></a>首先引入pom</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="然后实例化JedisPool"><a href="#然后实例化JedisPool" class="headerlink" title="然后实例化JedisPool"></a>然后实例化JedisPool</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JedisPool pool = <span class="keyword">new</span> JedisPool(<span class="keyword">new</span> JedisPoolConfig(), <span class="string">&quot;localhost&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="接着实例化jedis有两种方法"><a href="#接着实例化jedis有两种方法" class="headerlink" title="接着实例化jedis有两种方法"></a>接着实例化jedis有两种方法</h3><ol>
<li>try-with-resource法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Jedis implements Closeable. Hence, the jedis instance will be auto-closed after the last statement.</span></span><br><span class="line"><span class="keyword">try</span> (Jedis jedis = pool.getResource()) &#123;</span><br><span class="line">  <span class="comment">/// ... do stuff here ... for example</span></span><br><span class="line">  jedis.set(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">  String foobar = jedis.get(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">  jedis.zadd(<span class="string">&quot;sose&quot;</span>, <span class="number">0</span>, <span class="string">&quot;car&quot;</span>); jedis.zadd(<span class="string">&quot;sose&quot;</span>, <span class="number">0</span>, <span class="string">&quot;bike&quot;</span>); </span><br><span class="line">  Set&lt;String&gt; sose = jedis.zrange(<span class="string">&quot;sose&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// ... when closing your application:</span></span><br><span class="line">pool.close();<span class="comment">// 这便是原罪</span></span><br></pre></td></tr></table></figure></li>
<li>手动关闭jedis法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  jedis = pool.getResource();</span><br><span class="line">  <span class="comment">/// ... do stuff here ... for example</span></span><br><span class="line">  jedis.set(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">  String foobar = jedis.get(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">  jedis.zadd(<span class="string">&quot;sose&quot;</span>, <span class="number">0</span>, <span class="string">&quot;car&quot;</span>); jedis.zadd(<span class="string">&quot;sose&quot;</span>, <span class="number">0</span>, <span class="string">&quot;bike&quot;</span>); </span><br><span class="line">  Set&lt;String&gt; sose = jedis.zrange(<span class="string">&quot;sose&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// You have to close jedis object. If you don&#x27;t close then</span></span><br><span class="line">  <span class="comment">// it doesn&#x27;t release back to pool and you can&#x27;t get a new</span></span><br><span class="line">  <span class="comment">// resource from pool.</span></span><br><span class="line">  <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">    jedis.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// ... when closing your application:</span></span><br><span class="line">pool.close();</span><br></pre></td></tr></table></figure>
虽然不在报错了，但是现在不关的话又不知道在哪能关的了它了。。。</li>
</ol>
<hr>
<p>双手奉上： <a href="https://github.com/xetorthio/jedis/wiki/Getting-started">Jedis官方指引</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>jedis</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis传值乱码</title>
    <url>/blog/2017/08/27/mybatis-encoding-garbled/</url>
    <content><![CDATA[<h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><h2 id="前端显示页面"><a href="#前端显示页面" class="headerlink" title="前端显示页面"></a>前端显示页面</h2><p><img src="/images/garbled_page1.png"></p>
<h2 id="数据库页面"><a href="#数据库页面" class="headerlink" title="数据库页面"></a>数据库页面</h2><p><img src="/images/garbled_db1.png"></p>
<h2 id="目前可以推测出的几种情况："><a href="#目前可以推测出的几种情况：" class="headerlink" title="目前可以推测出的几种情况："></a>目前可以推测出的几种情况：</h2><blockquote>
<p>数据库表的字符编码与服务端不同<br>字符编码为非utf-8,gbk等能识别中文的编码<br>配置文件出错（读取或编写格式</p>
</blockquote>
<span id="more"></span>

<p>试试手动插入数据<br><img src="/images/garbled_db2.png"><br>数据库显示正常，页面乱码<br>–&gt;排除数据库编码问题</p>
<h2 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h2><p><img src="/images/application_properties.png"><br>编码与数据库同为UTF-8</p>
<p>发现一段诡异代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/toutiao?useUnicode=true&amp;ampcharacterEncoding=UTF-8&amp;ampuseSSL=false</span><br></pre></td></tr></table></figure>

<h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>删除amp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/toutiao?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br></pre></td></tr></table></figure>

<p>重启系统，乱码问题解决.<br><img src="/images/garbled_db3.png"><br><img src="/images/garbled_page2.png"></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis从安装到踩坑</title>
    <url>/blog/2017/11/29/redis-install/</url>
    <content><![CDATA[<p>先贴Redis官网：<a href="https://redis.io/download">https://redis.io/download</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://download.redis.io/releases/redis-4.0.2.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xzf redis-4.0.2.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> redis-4.0.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure>
<p>如果没有安装gcc，则会抛出这样的错误：<br><img src="/images/redis_install/redis_install_error.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install gcc</span></span><br></pre></td></tr></table></figure>
<p>在执行一次make可能会再抛出这样一个错误：<br><img src="/images/redis_install/redis_install_error2.png"></p>
<p>这样的话便在make后加上参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make MALLOC=libc</span></span><br></pre></td></tr></table></figure>
<p>编译完成后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> src/redis-server  redis.conf</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>当看到这个画面redis就启动完成了<br><img src="/images/redis_install/redis_running.png"></p>
<p>新建一个链接（开启新的终端或新的ssh标签页）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis-4.0.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> src/redis-cli</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/redis_install/redis_test.png"><br>至此大功告成，如果想学习redis命令，则点击：xxx.xxx/xxx</p>
<p>二：redis开启外部访问<br>远程连接redis访问被拒绝，初步推断为redis配置问题。<br>开了另一台服务器redis-cli远程连接，发现如下错误<br><img src="/images/redis_install/denied_of_protected_mode.png"><br>由图中可知，要想外部访问当前redis服务，需关闭安全模式。</p>
<p>关闭安全模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改protected-mode 由yes 改成 no</span></span><br></pre></td></tr></table></figure>
<p>关闭并重启后发现依旧访问被拒。<br><img src="/images/redis_install/denied_of_127_binded.png"></p>
<p>一波操作之后发现，需修改默认配置文件中的bind配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更改 <span class="built_in">bind</span> 127.0.0.1 为 <span class="built_in">bind</span> 0.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启redis后便可使用cmd或terminal测试连接</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> redis-cli -h &#123;redis_host&#125; -p &#123;redis_port&#125;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>&#123;redis_host&#125;</code>就是远程的Redis服务所在服务器地址，<code>&#123;redis_port&#125;</code>就是Redis服务端口（默认端口为6379）。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM_77_16_centos src]# ./redis-cli -h 你的ip -p 6379</span><br></pre></td></tr></table></figure>
<p>大功告成<br><img src="/images/redis_install/external_access_success.png"></p>
<p>三：redis的基本操作<br>关闭redis的两种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 无密码</span><br><span class="line"># redis-cli shutdown</span><br><span class="line"></span><br><span class="line"># 有密码</span><br><span class="line"># redis-cli -a password shutdown</span><br><span class="line"></span><br><span class="line"># 查询redis的pid，关闭进程</span><br><span class="line"># ps aux | grep redis</span><br><span class="line"># kill -9 pid</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>如何删除自己安装的python(干净、无残留)</title>
    <url>/blog/2017/12/24/remove-your-own-python/</url>
    <content><![CDATA[<p>最近又折腾起了python，于是发现很久以前的自己在各个地方留下了python的足迹，简直就是个更新日志。。<br>既然习惯了brew这个管家，那就把以前的坑都填好吧！</p>
<p>安装软件的时候很快活，卸载的时候就难受的不行，不熟悉系统目录，你就根本卸不干净。<br>当然市面上有很多pkg卸载软件，但是强迫症的自己总觉得它卸不干净<del>。</del></p>
<p>搜了一票国内论坛。。还是跑去StackOverFlow，找到了一个靠谱回答。<br>答主提供了python官网的反馈页面，是一位不知如何完整卸载python的网友提交的反馈。<br>一个叫<code>Ned Deily</code>的朋友提取了安装目录并将其制成卸载脚本（详情见参考链接）<br>知道了该删哪就可以动手了…</p>
<span id="more"></span>

<ol>
<li><p>python框架</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /Library/Frameworks/Python.framework/Versions/x.x</span><br></pre></td></tr></table></figure></li>
<li><p>python应用目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &quot;/Applications/Python x.x&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><code>/usr/local/bin</code>下的软连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bin/</span><br><span class="line">ls -l /usr/local/bin | grep &#x27;../Library/Frameworks/Python.framework/Versions/x.x&#x27; | awk &#x27;&#123;print $9&#125;&#x27; | tr -d @ | xargs rm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果想检查一下有没有删干净</span></span><br><span class="line">ls -l /usr/local/bin | grep &#x27;../Library/Frameworks/Python.framework/Versions/x.x&#x27;</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="4">
<li>若有环境变量等系统配置文件的配置，需另行手动删除<ul>
<li>~/.bash_login</li>
<li>~/.bash_profile</li>
<li>~/.cshrc</li>
<li>~/.profile</li>
<li>~/.tcshrc</li>
<li>~/.zprofile</li>
</ul>
</li>
</ol>
<p>以上的<code>x.x</code>都为python版本号，自行替换即可。</p>
<hr>
<p>参考链接：<br><a href="https://bugs.python.org/issue7107">Python Bug Tracker</a><br><a href="https://stackoverflow.com/questions/3819449/how-to-uninstall-python-2-7-on-a-mac-os-x-10-6-4/3819829#3819829">How to uninstall Python 2.7 on a Mac OS X 10.6.4?</a></p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的default约束用法</title>
    <url>/blog/2017/05/31/mysql-default-constraint/</url>
    <content><![CDATA[<p>在sql最基本的curd语句使用熟练后，我开始发现提高数据库的稳定性和易用性需要一些其他的东西，比如<code>constraint</code>(约束)。</p>
<p>我就一个没经过数据加密的user表演示一下<code>default约束</code>的用法。</p>
<h2 id="建表语句中使用"><a href="#建表语句中使用" class="headerlink" title="建表语句中使用"></a>建表语句中使用</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">	username <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="keyword">null</span>,</span><br><span class="line">	status <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> &quot;active&quot;;</span><br><span class="line">	<span class="keyword">primary</span> key (id)</span><br><span class="line">) engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<h2 id="已有表结构？使用alter插入字段"><a href="#已有表结构？使用alter插入字段" class="headerlink" title="已有表结构？使用alter插入字段"></a>已有表结构？使用alter插入字段</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> status <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> &quot;active&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="有默认值的表如何添加数据"><a href="#有默认值的表如何添加数据" class="headerlink" title="有默认值的表如何添加数据"></a>有默认值的表如何添加数据</h2><p>那么表结构已经有了<code>default约束</code>，在插入值的时候如何处理字段的默认值呢？<br>传入null？空字符串？或者是不填？都不行！</p>
<span id="more"></span>
<p>答案是<code>传入default关键字</code>，表示插入字段预设的默认值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="keyword">null</span>, &quot;c&quot;, &quot;c&quot;, <span class="keyword">default</span>);</span><br></pre></td></tr></table></figure>
<p>你想覆盖default约束传入自定义值？ 填写对应类型的值就行了。</p>
<hr>
<p>参考链接：<br><a href="https://www.w3schools.com/sql/sql_default.asp">SQL DEFAULT Constraint</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是分布式事务</title>
    <url>/blog/2018/03/19/simple-to-understand-transaction/</url>
    <content><![CDATA[<h1 id="简单说一下事务"><a href="#简单说一下事务" class="headerlink" title="简单说一下事务"></a>简单说一下事务</h1><p>事务就是单个逻辑执行的一系列操作，要么全部成功，要么全部失败。<br>事务包含4个特性（<strong>ACID</strong>）：</p>
<ol>
<li>Atomicity（原子性）：事务中包含的所有操作要么全做，要么全不做。</li>
<li>Consistency（一致性）：事务开始以前，数据库处于一致性的状态，事务结束后，数据库也必须处于一致性的状态。</li>
<li>Isolation（隔离性）：系统必须保证事务不受其他并发执行的事务的影响。</li>
<li>Durability（持久性）：一个事务一旦成功完成，它对数据库的改变必须是永久的，即使是在系统遇到故障的情况下也不会丢失。</li>
</ol>
<h1 id="假如没有事务"><a href="#假如没有事务" class="headerlink" title="假如没有事务"></a>假如没有事务</h1><p>我们以银行的ATM机为例子：</p>
<p>取款操作一般为两个核心步骤：</p>
<ol>
<li>余额扣除相应金额</li>
<li>ATM机吐钞</li>
</ol>
<p>如果金额扣除了，而ATM机却因某些原因无法吐钞，那用户就崩溃了。而若是金额没扣除，ATM却吐钞了，那就是银行崩溃了。所以事务（分布式）的重要性在这里就体现的淋漓尽致了，这也正是事务中的一致性。</p>
<h1 id="说说分布式事务"><a href="#说说分布式事务" class="headerlink" title="说说分布式事务"></a>说说分布式事务</h1><p>分布式事务的体现有很多种，其中最具代表性的是由Oracle Tuxedo系统提出的XA分布式事务协议。</p>
<p>XA协议包含<strong>两阶段提交（2PC）</strong>和<strong>三阶段提交（3PC</strong>两种实现。</p>
<h2 id="两阶段提交（2PC）"><a href="#两阶段提交（2PC）" class="headerlink" title="两阶段提交（2PC）"></a>两阶段提交（2PC）</h2><p>两阶段提交就像支持多人游戏的网游游戏模式（可参考近日火热的PUBG）。</p>
<p>在游戏开始前，一个队伍中会有两种角色，队长与队员，也分别对应着<strong>事务协调者</strong>与<strong>事务参与者</strong>。</p>
<h3 id="正向流程"><a href="#正向流程" class="headerlink" title="正向流程"></a>正向流程</h3><p>一个XA两阶段提交的正向流程分为这两阶段：</p>
<blockquote>
<p>第一阶段：</p>
</blockquote>
<ol>
<li>以发送邀请的玩家A为首，邀请到了呵自己开黑的小伙伴B、C、D进入队伍，并请求他们点击准备按钮。</li>
<li>小伙伴 B、C、D 全部准备就绪。</li>
</ol>
<blockquote>
<p>第二阶段：</p>
</blockquote>
<ol>
<li>A 大吼一声，「伞兵一号准备就绪！」随即点击开始游戏。</li>
<li>A 首先进入游戏，等待 B、C、D片刻后，大家都成功进入游戏地图。</li>
</ol>
<p>对应到正经的XA中是这样的：</p>
<blockquote>
<p>第一阶段：</p>
</blockquote>
<ol>
<li><p>协调者向参与者们发送Prepare请求</p>
</li>
<li><p>参与者们各自执行自己与事务有关的数据更新，写入Undo Log和Redo Log。如果参与者执行成功，暂时不提交事务，而是向事务协调节点返回“Done”消息。</p>
<p>当事务协调者接到了所有参与者的返回消息，整个分布式事务将会进入第二阶段。</p>
</li>
</ol>
<blockquote>
<p>第二阶段：</p>
</blockquote>
<ol>
<li>如果事务协调节点在之前所收到都是正向返回，那么它将会向所有事务参与者发出Commit请求。</li>
<li>接到Commit请求之后，事务参与者节点会各自进行本地的事务提交，并释放锁资源。当本地事务完成提交后，将会向事务协调者返回“ACK”消息。</li>
<li>事务协调者接收到所有事务参与者的“完成”反馈，整个分布式事务完成。</li>
</ol>
<h3 id="失败处理"><a href="#失败处理" class="headerlink" title="失败处理"></a>失败处理</h3><ol>
<li>如果某个事务参与者反馈失败消息，说明该节点的本地事务执行不成功，必须回滚。</li>
<li>于是在第二阶段，事务协调节点向所有的事务参与者发送Abort请求。接收到Abort请求之后，各个事务参与者节点需要在本地进行事务的回滚操作，回滚操作依照Undo Log来进行。</li>
</ol>
<h2 id="XA两阶段提交的不足"><a href="#XA两阶段提交的不足" class="headerlink" title="XA两阶段提交的不足"></a>XA两阶段提交的不足</h2><blockquote>
<p>性能问题</p>
</blockquote>
<p>XA协议遵循强一致性。在事务执行过程中，各个节点占用着数据库资源，只有当所有节点准备完毕，事务协调者才会通知提交，参与者提交后释放资源。这样的过程有着非常明显的性能问题。</p>
<blockquote>
<p>协调者单点故障问题</p>
</blockquote>
<p>事务协调者是整个XA模型的核心，一旦事务协调者节点挂掉，参与者收不到提交或是回滚通知，参与者会一直处于中间状态无法完成事务。</p>
<blockquote>
<p>丢失消息导致的不一致问题</p>
</blockquote>
<p>在XA协议的第二个阶段，如果发生局部网络问题，一部分事务参与者收到了提交消息，另一部分事务参与者没收到提交消息，那么就导致了节点之间数据的不一致。</p>
<h3 id="如何避免XA两阶段提交的种种问题"><a href="#如何避免XA两阶段提交的种种问题" class="headerlink" title="如何避免XA两阶段提交的种种问题"></a>如何避免XA两阶段提交的种种问题</h3><p>有许多其他的分布式事务方案可供选择：</p>
<blockquote>
<p>XA三阶段提交</p>
</blockquote>
<p>XA三阶段提交在两阶段提交的基础上增加了CanCommit阶段，并且引入了超时机制。一旦事物参与者迟迟没有接到协调者的commit请求，会自动进行本地commit。这样有效解决了协调者单点故障的问题。但是性能问题和不一致的问题仍然没有根本解决。</p>
<blockquote>
<p>MQ事务</p>
</blockquote>
<p>利用消息中间件来异步完成事务的后一半更新，实现系统的最终一致性。这个方式避免了像XA协议那样的性能问题。</p>
<blockquote>
<p>TCC事务</p>
</blockquote>
<p>TCC事务是Try、Commit、Cancel三种指令的缩写，其逻辑模式类似于XA两阶段提交，但是实现方式是在代码层面来人为实现。</p>
]]></content>
      <tags>
        <tag>Transaction</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqoop 之常用命令与防坑指南</title>
    <url>/blog/2018/11/13/sqoop-common-command/</url>
    <content><![CDATA[<p><code>Sqoop</code> 的功能十分强大，可以帮助你完成不同数据库或数据仓库之间的数据同步任务。</p>
<p>总所周知的是 Sqoop 有两个版本</p>
<ul>
<li>1.4.x </li>
<li>1.99.x</li>
</ul>
<p>它们一个代表着 sqoop1，一个代表着sqoop2，它们功能性上的异同可简单归纳为以下几点，其余差异不在本文做过多的赘述。</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>Sqoop 1</th>
<th>Sqoop 2</th>
</tr>
</thead>
<tbody><tr>
<td>用于所有主要 RDBMS 的连接器</td>
<td>支持</td>
<td>不支持<br />解决办法： 使用已在以下数据库上执行测试的通用 JDBC 连接器： Microsoft SQL Server 、 PostgreSQL 、 MySQL 和 Oracle 。</td>
</tr>
<tr>
<td>Kerberos 安全集成</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>数据从 RDBMS 传输至 Hive 或 HBase</td>
<td>支持</td>
<td>不支持<br />解决办法： 按照此两步方法操作。 将数据从 RDBMS 导入 HDFS 在 Hive 中使用相应的工具和命令（例如 LOAD DATA 语句），手动将数据载入 Hive 或 HBase</td>
</tr>
<tr>
<td>数据从 Hive 或 HBase 传输至 RDBMS</td>
<td>不支持 <br />解决办法： 按照此两步方法操作。 从 Hive 或 HBase 将数据提取至 HDFS （作为文本或 Avro 文件） 使用 Sqoop 将上一步的输出导出至 RDBMS</td>
<td>不支持<br /> 按照与 Sqoop 1 相同的解决方法操作</td>
</tr>
</tbody></table>
<p>关于两者在其他方面的异同可以参考此文：<a href="https://blog.csdn.net/Gamer_gyt/article/details/55225700">Sqoop1和Sqoop2的刨析对比</a></p>
<h1 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h1><p>本文的背景环境为 <code>sqoop 1.4.6</code></p>
<p>sqoop 的命令格式十分简单，只需要往上累加需要的参数即可</p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop <span class="built_in">help</span></span></span><br><span class="line">usage: sqoop COMMAND [ARGS]</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  codegen            Generate code to interact with database records</span><br><span class="line">  create-hive-table  Import a table definition into Hive</span><br><span class="line">  eval               Evaluate a SQL statement and display the results</span><br><span class="line">  export             Export an HDFS directory to a database table</span><br><span class="line">  help               List available commands</span><br><span class="line">  import             Import a table from a database to HDFS</span><br><span class="line">  import-all-tables  Import tables from a database to HDFS</span><br><span class="line">  import-mainframe   Import mainframe datasets to HDFS</span><br><span class="line">  list-databases     List available databases on a server</span><br><span class="line">  list-tables        List available tables in a database</span><br><span class="line">  version            Display version information</span><br><span class="line"></span><br><span class="line">See &#x27;sqoop help COMMAND&#x27; for information on a specific command.</span><br></pre></td></tr></table></figure>

<p>这篇文章叙述的主要对象为 <code>create hive table </code>、<code>sqoop import</code> ，它们不仅仅是我最为常用的命令，也是 sqoop 家族里使用频率比较高的命令。</p>
<h1 id="通用命令参数"><a href="#通用命令参数" class="headerlink" title="通用命令参数"></a>通用命令参数</h1><p> 该表格记录了一些命令的通用操作选项：</p>
<table>
<thead>
<tr>
<th>Argument</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>--connect &lt;jdbc-uri&gt;</code></td>
<td>Specify JDBC connect string</td>
</tr>
<tr>
<td><code>--connection-manager &lt;class-name&gt;</code></td>
<td>Specify connection manager class to use</td>
</tr>
<tr>
<td><code>--driver &lt;class-name&gt;</code></td>
<td>Manually specify JDBC driver class to use</td>
</tr>
<tr>
<td><code>--hadoop-mapred-home &lt;dir&gt;</code></td>
<td>Override $HADOOP_MAPRED_HOME</td>
</tr>
<tr>
<td><code>--help</code></td>
<td>Print usage instructions</td>
</tr>
<tr>
<td><code>--password-file</code></td>
<td>Set path for a file containing the authentication password</td>
</tr>
<tr>
<td><code>-P</code></td>
<td>Read password from console</td>
</tr>
<tr>
<td><code>--password &lt;password&gt;</code></td>
<td>Set authentication password</td>
</tr>
<tr>
<td><code>--username &lt;username&gt;</code></td>
<td>Set authentication username</td>
</tr>
<tr>
<td><code>--verbose</code></td>
<td>Print more information while working</td>
</tr>
<tr>
<td><code>--connection-param-file &lt;filename&gt;</code></td>
<td>Optional properties file that provides connection parameters</td>
</tr>
<tr>
<td><code>--relaxed-isolation</code></td>
<td>Set connection transaction isolation to read uncommitted for the mappers.</td>
</tr>
</tbody></table>
<p> 从参数名也可以看出，都是访问过程中必要的连接信息。</p>
<h1 id="Sqoop-Create-Hive-Table"><a href="#Sqoop-Create-Hive-Table" class="headerlink" title="Sqoop Create Hive Table"></a>Sqoop Create Hive Table</h1><p>如果你想复制源数据库的表结构至目标库，那就试试这条指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop create-hive-table (generic-args) (create-hive-table-args)</span></span><br></pre></td></tr></table></figure>



<h2 id="Hive-参数"><a href="#Hive-参数" class="headerlink" title="Hive 参数"></a>Hive 参数</h2><table>
<thead>
<tr>
<th>Argument</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>--hive-home &lt;dir&gt;</code></td>
<td>Override <code>$HIVE_HOME</code></td>
</tr>
<tr>
<td><code>--hive-overwrite</code></td>
<td>Overwrite existing data in the Hive table.</td>
</tr>
<tr>
<td><code>--create-hive-table</code></td>
<td>If set, then the job will fail if the target hive</td>
</tr>
<tr>
<td></td>
<td>table exits. By default this property is false.</td>
</tr>
<tr>
<td><code>--hive-table &lt;table-name&gt;</code></td>
<td>Sets the table name to use when importing to Hive.</td>
</tr>
<tr>
<td><code>--table</code></td>
<td>The database table to read the definition from.</td>
</tr>
</tbody></table>
<h2 id="输出格式定义参数"><a href="#输出格式定义参数" class="headerlink" title="输出格式定义参数"></a>输出格式定义参数</h2><table>
<thead>
<tr>
<th>Argument</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>--enclosed-by &lt;char&gt;</code></td>
<td>Sets a required field enclosing character</td>
</tr>
<tr>
<td><code>--escaped-by &lt;char&gt;</code></td>
<td>Sets the escape character</td>
</tr>
<tr>
<td><code>--fields-terminated-by &lt;char&gt;</code></td>
<td>Sets the field separator character</td>
</tr>
<tr>
<td><code>--lines-terminated-by &lt;char&gt;</code></td>
<td>Sets the end-of-line character</td>
</tr>
<tr>
<td><code>--mysql-delimiters</code></td>
<td>Uses MySQL’s default delimiter set: fields: <code>,</code> lines: <code>\n</code> escaped-by: <code>\</code> optionally-enclosed-by: <code>&#39;</code></td>
</tr>
<tr>
<td><code>--optionally-enclosed-by &lt;char&gt;</code></td>
<td>Sets a field enclosing character</td>
</tr>
</tbody></table>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>其实也只需要指定相关数据库库的库名表名也就可以了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop create-hive-table</span> </span><br><span class="line">    --connect jdbc:mysql://127.0.0.1:3306/tmp \</span><br><span class="line">    --table employees \</span><br><span class="line">    --hive-table emps \</span><br></pre></td></tr></table></figure>



<h1 id="Sqoop-import"><a href="#Sqoop-import" class="headerlink" title="Sqoop import"></a>Sqoop import</h1><p>一个完整的 <code>Sqoop</code> 命令需要由多个参数拼接而成，包括 jdbc-uri、输入输出的数据存储地址、用户名、密码以及更为复杂的可选参数等等。</p>
<h2 id="Import-参数"><a href="#Import-参数" class="headerlink" title="Import 参数"></a>Import 参数</h2><p>数据导入是个相对复杂的操作，所以参数也比单纯建表多一些：</p>
<table>
<thead>
<tr>
<th>Argument</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>--append</code></td>
<td>Append data to an existing dataset in HDFS</td>
</tr>
<tr>
<td><code>--as-avrodatafile</code></td>
<td>Imports data to Avro Data Files</td>
</tr>
<tr>
<td><code>--as-sequencefile</code></td>
<td>Imports data to SequenceFiles</td>
</tr>
<tr>
<td><code>--as-textfile</code></td>
<td>Imports data as plain text (default)</td>
</tr>
<tr>
<td><code>--as-parquetfile</code></td>
<td>Imports data to Parquet Files</td>
</tr>
<tr>
<td><code>--boundary-query &lt;statement&gt;</code></td>
<td>Boundary query to use for creating splits</td>
</tr>
<tr>
<td><code>--columns &lt;col,col,col…&gt;</code></td>
<td>Columns to import from table</td>
</tr>
<tr>
<td><code>--delete-target-dir</code></td>
<td>Delete the import target directory if it exists</td>
</tr>
<tr>
<td><code>--direct</code></td>
<td>Use direct connector if exists for the database</td>
</tr>
<tr>
<td><code>--fetch-size &lt;n&gt;</code></td>
<td>Number of entries to read from database at once.</td>
</tr>
<tr>
<td><code>--inline-lob-limit &lt;n&gt;</code></td>
<td>Set the maximum size for an inline LOB</td>
</tr>
<tr>
<td><code>-m,--num-mappers &lt;n&gt;</code></td>
<td>Use <em>n</em> map tasks to import in parallel</td>
</tr>
<tr>
<td><code>-e,--query &lt;statement&gt;</code></td>
<td>Import the results of <em>statement</em>.</td>
</tr>
<tr>
<td><code>--split-by &lt;column-name&gt;</code></td>
<td>Column of the table used to split work units. Cannot be used with <code>--autoreset-to-one-mapper</code> option.</td>
</tr>
<tr>
<td><code>--autoreset-to-one-mapper</code></td>
<td>Import should use one mapper if a table has no primary key and no split-by column is provided. Cannot be used with <code>--split-by &lt;col&gt;</code> option.</td>
</tr>
<tr>
<td><code>--table &lt;table-name&gt;</code></td>
<td>Table to read</td>
</tr>
<tr>
<td><code>--target-dir &lt;dir&gt;</code></td>
<td>HDFS destination dir</td>
</tr>
<tr>
<td><code>--warehouse-dir &lt;dir&gt;</code></td>
<td>HDFS parent for table destination</td>
</tr>
<tr>
<td><code>--where &lt;where clause&gt;</code></td>
<td>WHERE clause to use during import</td>
</tr>
<tr>
<td><code>-z,--compress</code></td>
<td>Enable compression</td>
</tr>
<tr>
<td><code>--compression-codec &lt;c&gt;</code></td>
<td>Use Hadoop codec (default gzip)</td>
</tr>
<tr>
<td><code>--null-string &lt;null-string&gt;</code></td>
<td>The string to be written for a null value for string columns</td>
</tr>
<tr>
<td><code>--null-non-string &lt;null-string&gt;</code></td>
<td>The string to be written for a null value for non-string columns</td>
</tr>
</tbody></table>
<h2 id="说说几个比较关键的参数解读"><a href="#说说几个比较关键的参数解读" class="headerlink" title="说说几个比较关键的参数解读"></a>说说几个比较关键的参数解读</h2><blockquote>
<p>–split-by</p>
</blockquote>
<p>若源数据表中没有制定主键，将会导致执行失败，若是指定 <code>--split-by</code> 参数，程序便可根据所指定的字段进行 <code>map reduce</code> 切分。当然，由于 <code>--split-by</code> 指定的字段可能是无序甚至重复或不连续的，所以做分片的时间会非常久。</p>
<blockquote>
<p>–as-parquetfile</p>
</blockquote>
<ul>
<li>textfile</li>
<li>avrodatafile</li>
<li>sequencefile</li>
<li>parquetfile</li>
</ul>
<p>这个参数和其他几个参数一样，主要是选择存储文件的格式</p>
<p>关于 Hive 文件格式的区别，可以参考这篇文章</p>
<p><a href="http://dwgeek.com/hive-different-file-formats-text-sequence-rc-avro-orc-parquet-file.html/">Apache Hive Different File Formats:TextFile,SequenceFile,RCFile,AVRO,ORC,Parquet</a></p>
<blockquote>
<p>–compression-codec</p>
</blockquote>
<p>选择压缩解码器，若是选用 <code>Snappy Compression</code> 可使用这个参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--compression-codec org.apache.hadoop.io.compress.SnappyCodec</span><br></pre></td></tr></table></figure>

<p>可参考 <code>CDH</code> 的官方文档</p>
<p><a href="https://www.cloudera.com/documentation/enterprise/5-6-x/topics/cdh_ig_snappy_sqoop.html">Using Snappy Compression in Sqoop 1 and Sqoop 2 Imports</a></p>
<blockquote>
<p>–fields-terminated-by <char></p>
</blockquote>
<p>字段分隔符，数据传输难免会遇到字符串类型，这便会造成很多令你感到奇怪的事情</p>
<p>比如说字符串中自带换行符或其他字符，这些字符可能你看的见，也可能看不见</p>
<p>导致的后果是行数多了几行或者翻了几倍，这种情况很大可能就是换行符搞的鬼</p>
<p>这时你可以尝试使用下面的参数，就有很大可能可以解决你的燃眉之急</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--fields-terminated-by &#x27;\001&#x27;</span><br><span class="line">--fields-terminated-by &#x27;\0001&#x27;</span><br></pre></td></tr></table></figure>



<p>关于换行符对 Hive 造成影响的原因和解决方案强烈推荐参阅这篇文章</p>
<p><a href="https://www.marcel.is/how-newline-can-ruin-your-hive/">How a newline can ruin your Hive</a></p>
<blockquote>
<p>–lines-terminated-by <char></p>
</blockquote>
<p>有列分隔符便有行分隔符，直接用 <code>\n</code> 就行了，能 hold 住大部分场景，这也是 <code>Sqoop</code> 默认的选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--lines-terminated-by &#x27;\n&#x27;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>–hive-overwrite</p>
</blockquote>
<p>有了这个参数，就可以覆盖同步了，免去了手动 drop 表的操作</p>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>可以做为模板使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect jdbc:mysql://127.0.0.1:3306/tmp   \</span></span><br><span class="line"><span class="bash">  --username amos   \</span></span><br><span class="line"><span class="bash">  --password amos_tmp   \</span></span><br><span class="line"><span class="bash">  --table user_account_statement   \</span></span><br><span class="line"><span class="bash">  --hive-import  --hive-overwrite   \</span></span><br><span class="line"><span class="bash">  --hive-database tmp   \</span></span><br><span class="line"><span class="bash">  --hive-table user_account_statement   \</span></span><br><span class="line"><span class="bash">  --hive-drop-import-delims --fields-terminated-by <span class="string">&#x27;\001&#x27;</span> --lines-terminated-by <span class="string">&#x27;\n&#x27;</span>  \</span></span><br><span class="line"><span class="bash">  --compression-codec org.apache.hadoop.io.compress.SnappyCodec   \</span></span><br><span class="line"><span class="bash">  --as-parquetfile</span> </span><br></pre></td></tr></table></figure>



<h2 id="自由格式查询导入"><a href="#自由格式查询导入" class="headerlink" title="自由格式查询导入"></a>自由格式查询导入</h2><p>相比上面的传统做法，还有一种更猛的，可以实现数据的高度定制。</p>
<p>就是使用 SQL 来实现结果集导入，其实上面部分参数的存在意义也就是拼凑出一段 SQL 而已。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop import \</span></span><br><span class="line"><span class="bash">  --query <span class="string">&#x27;SELECT a.*, b.* FROM a JOIN b on (a.id == b.id) WHERE a.create_time&gt;1542097292&#x27;</span> \</span></span><br><span class="line"><span class="bash">  --split-by a.id \</span></span><br><span class="line"><span class="bash">  --target-dir /user/amos/joinresults</span></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Sqoop</tag>
        <tag>Hive</tag>
        <tag>CDH</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqoop 之 job 工具</title>
    <url>/blog/2018/11/19/sqoop-job-guide/</url>
    <content><![CDATA[<p>本文成型的历史原因来源于使用 <code>shell</code> 脚本封装单个 <code>sqoop</code> 的脑壳疼操作</p>
<p>在执行定时任务的时候，如果需要执行的 <code>sqoop</code> 足够多，我们可以将他们封装在一个 <code>shell</code> 脚本中，再使用 <code>crontab</code> 进行定时任务调用。</p>
<p>而如果同一时间需要执行的 <code>sqoop</code> 数量仅仅只有一两个，那我们完全没有必要为了它写一个 <code>shell</code> 脚本，当然只是按场景选择不同策略，并不代表哪种方法更差。</p>
<p>对于不想多建 shell 脚本的同学，还有 <code>sqoop job</code> 这条路。</p>
<span id="more"></span>

<h2 id="job-语法"><a href="#job-语法" class="headerlink" title="job 语法"></a>job 语法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop job (generic-args) (job-args) [-- [subtool-name] (subtool-args)]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop-job (generic-args) (job-args) [-- [subtool-name] (subtool-args)]</span></span><br></pre></td></tr></table></figure>

<p><code>sqoop job</code> 的语法如上所示，而其后追加的命令参数也无需按顺序堆砌。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><table>
<thead>
<tr>
<th>Argument</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>--create &lt;job-id&gt;</code></td>
<td>Define a new saved job with the specified job-id (name). A second Sqoop command-line, separated by a <code>--</code> should be specified; this defines the saved job.</td>
</tr>
<tr>
<td><code>--delete &lt;job-id&gt;</code></td>
<td>Delete a saved job.</td>
</tr>
<tr>
<td><code>--exec &lt;job-id&gt;</code></td>
<td>Given a job defined with <code>--create</code>, run the saved job.</td>
</tr>
<tr>
<td><code>--show &lt;job-id&gt;</code></td>
<td>Show the parameters for a saved job.</td>
</tr>
<tr>
<td><code>--list</code></td>
<td>List all saved jobs</td>
</tr>
</tbody></table>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>一条同步的命令大致是长这个样子</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop import</span> </span><br><span class="line">  --connect jdbc:mysql://127.0.0.1:3306/tmp   \</span><br><span class="line">  --username amos   \</span><br><span class="line">  --password amos_tmp   \</span><br><span class="line">  --table user_log   \</span><br><span class="line">  --hive-import  --hive-overwrite   \</span><br><span class="line">  --hive-database tmp   \</span><br><span class="line">  --hive-table user_log   \</span><br><span class="line">  --hive-drop-import-delims --fields-terminated-by &#x27;\001&#x27; --lines-terminated-by &#x27;\n&#x27;  \</span><br><span class="line">  --compression-codec org.apache.hadoop.io.compress.SnappyCodec   \</span><br><span class="line">  --as-parquetfile</span><br></pre></td></tr></table></figure>



<p>建立 <code>sqoop job</code> 所需要的操作只需要把上面的参数追加在下面这条命令下就可以了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop job --create user_log -- import</span></span><br></pre></td></tr></table></figure>



<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop job -delete user_log</span></span><br></pre></td></tr></table></figure>



<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop job --<span class="built_in">exec</span> user_log</span></span><br></pre></td></tr></table></figure>



<h3 id="查看详情"><a href="#查看详情" class="headerlink" title="查看详情"></a>查看详情</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop job --show user_log</span></span><br></pre></td></tr></table></figure>



<h3 id="查看-job-列表"><a href="#查看-job-列表" class="headerlink" title="查看 job 列表"></a>查看 job 列表</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop job --list</span></span><br><span class="line">18/11/19 02:57:58 INFO sqoop.Sqoop: Running Sqoop version: 1.4.6-cdh5.14.0</span><br><span class="line">Available jobs:</span><br><span class="line">  user_log</span><br></pre></td></tr></table></figure>



<h2 id="如何制定定时任务？"><a href="#如何制定定时任务？" class="headerlink" title="如何制定定时任务？"></a>如何制定定时任务？</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> crontab -e</span></span><br><span class="line">0 0 * * * sqoop job --exec user_log &gt;&gt; /home/amos/sqoop_job/user_log.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>仅仅是一个 <code>crontab</code> 的调用语句，简单高效。</p>
<h2 id="每次执行都需要输入数据库密码？"><a href="#每次执行都需要输入数据库密码？" class="headerlink" title="每次执行都需要输入数据库密码？"></a>每次执行都需要输入数据库密码？</h2><p><code>sqoop</code> 将它们存储数据的 <code>metastore</code> 定义为不安全的地方，所以它并没有将数据库密码存入 <code>metastore</code>，这十分合理，但如果你觉得这无所谓，可以开启存储密码的选项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi <span class="variable">$&#123;SQOOP_HOME&#125;</span>/conf/sqoop-site.xml</span></span><br></pre></td></tr></table></figure>

<p>增加如下内容</p>
<blockquote>
<property>
    <name>sqoop.metastore.client.record.password</name>
    <value>true</value>
    <description>If true, allow saved passwords in the metastore.
    </description>
</property>
</blockquote>
<p>只需要在第一次执行时输入密码，之后密码就存储在 <code>metastore</code> 中了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://sqoop.apache.org/docs/1.4.6/SqoopUserGuide.html#_literal_sqoop_job_literal">sqoop-job</a></p>
<p><a href="https://sqoop.apache.org/docs/1.4.6/SqoopUserGuide.html#_saved_jobs_and_passwords">Saved jobs and passwords</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>Sqoop</tag>
        <tag>Crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Java mail 报错 trying to connect to host &quot;*.*.com&quot;, port 587, isSSL true的另一种解决办法</title>
    <url>/blog/2017/07/18/trying-to-connect-to-host/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEBUG SMTP: trying to connect to host &quot;xxx.xxx.com&quot;, port 587, isSSL true</span><br><span class="line">send failed... the exception is javax.mail.MessagingException: Could not connect to SMTP host: xxx.xxx.com, port: 587;</span><br><span class="line">  nested exception is:</span><br><span class="line">javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?</span><br></pre></td></tr></table></figure>
<p>如果你遇到了这种报错，而其它办法又解决不了。<br>不妨试试调整properties的put()方法放置顺序吧。<br>起初我也觉得put()顺序并不会影响到后续的其他方法块对它的读取啊。<br>然而当我调转了它们的位置时，不再报错了。。<br>邮件成功的发送出去了。</p>
<p>这是我放置properties的方法块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MailSSLSocketFactory mssf = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  mssf = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">  mssf.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line">  properties.put(<span class="string">&quot;mail.smtp.ssl.socketFactory&quot;</span>, mssf);</span><br><span class="line">  properties.put(<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">  properties.put(<span class="string">&quot;mail.smtp.port&quot;</span>, <span class="string">&quot;587&quot;</span>);</span><br><span class="line">  properties.put(<span class="string">&quot;mail.smtp.ssl.socketFactory.port&quot;</span>, <span class="string">&quot;587&quot;</span>);</span><br><span class="line">  properties.setProperty(<span class="string">&quot;mail.imap.ssl.socketFactory.class&quot;</span>, <span class="string">&quot;DummySSLSocketFactory&quot;</span>);</span><br><span class="line">  properties.setProperty(<span class="string">&quot;mail.imap.ssl.socketFactory.fallback&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line"><span class="comment">// properties.setProperty(&quot;mail.smtp.port&quot;, &quot;587&quot;);</span></span><br><span class="line"><span class="comment">// properties.setProperty(&quot;mail.smtp.socketFactory.port&quot;, &quot;587&quot;);</span></span><br><span class="line"><span class="comment">// properties.setProperty(&quot;mail.imap.ssl.enable&quot;, &quot;true&quot;);</span></span><br><span class="line"><span class="comment">// properties.setProperty(&quot;mail.imap.ssl.socketFactory.class&quot;, &quot;DummySSLSocketFactory&quot;);</span></span><br><span class="line"><span class="comment">// properties.setProperty(&quot;mail.imap.ssl.socketFactory.fallback&quot;, &quot;false&quot;);</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> GeneralSecurityException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>而你需要做的便是把</p>
<blockquote>
<p>properties.put(“mail.smtp.ssl.enable”, “true”);</p>
</blockquote>
<p>放在</p>
<blockquote>
<p>properties.put(“mail.smtp.port”, “587”);<br>properties.put(“mail.smtp.ssl.socketFactory.port”, “587”);</p>
</blockquote>
<p>的下面。</p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue开发路上遇到的坑儿们</title>
    <url>/blog/2018/01/24/vue-error-collection/</url>
    <content><![CDATA[<h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>此文仅用于记录vue开发中遇到的各种奇葩事。</p>
<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><h2 id="项目不报错但是路由不加载"><a href="#项目不报错但是路由不加载" class="headerlink" title="项目不报错但是路由不加载"></a>项目不报错但是路由不加载</h2><p>前方预警：这是个低级错误Orz<br>index.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/&#x27;,</span><br><span class="line">      name: &#x27;Index&#x27;,</span><br><span class="line">      component: &#123;</span><br><span class="line">        nav: Navv,</span><br><span class="line">        main: Index,</span><br><span class="line">        footer: Footter</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view name=&quot;nav&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;router-view name=&quot;main&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;router-view name=&quot;footer&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>如果你和我一样是只小白菜，可能咋一看会发现没什么毛病，仔细一看就会发现路由配置里的<code>components</code>被我写成了·component·。。<br>vue中到目前为止我知道的两种路由配置方式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 第一种</span><br><span class="line">...</span><br><span class="line">component: navv</span><br><span class="line">...</span><br><span class="line">// 第二种</span><br><span class="line">components: &#123;</span><br><span class="line">	navv</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>over, 经验值 +1</p>
<h2 id="Failed-to-execute-‘setAttribute’-on-‘Element’-‘method-’-is-not-a-valid-attribute-name"><a href="#Failed-to-execute-‘setAttribute’-on-‘Element’-‘method-’-is-not-a-valid-attribute-name" class="headerlink" title="Failed to execute ‘setAttribute’ on ‘Element’: ‘method+’ is not a valid attribute name."></a>Failed to execute ‘setAttribute’ on ‘Element’: ‘method+’ is not a valid attribute name.</h2><p>由于项目中引入了饿了么开发的组件库·element-ui·，所以一度以为是和我引入的css文件起了冲突？？甚至我还去执行了<code>npm uninstall element-ui</code>这条命令。最后实在没办法了，一段一段代码排查问题，找到一个诡异的地方。。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/listTopic&quot; method+=&quot;post&quot;&gt;</span><br><span class="line">  &lt;input name=&quot;topicName&quot; type=&quot;text&quot; class=&quot;search-input&quot; placeholder=&quot;搜索你感兴趣的内容...&quot;&gt;</span><br><span class="line">  &lt;button type=&quot;submit&quot; class=&quot;search-button&quot;&gt;&lt;i class=&quot;sprite-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>噗。。form标签下的method方法多了个+号。。。想拿头去撞豆腐了。<br>ok，经验值 +1</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker + Nginx 镜像部署 Vue 项目</title>
    <url>/blog/2018/03/28/deploy-the-vue-project-using-docker-and-nginx/</url>
    <content><![CDATA[<h1 id="简单介绍-Docker"><a href="#简单介绍-Docker" class="headerlink" title="简单介绍 Docker"></a>简单介绍 Docker</h1><p>Docker 真是个好东西，很好的降低了不同环境发版的兼容性问题。无论是 Linux, Windows 或是 Mac OS，再也不用怕系统环境不同，软件版本不同导致的项目无法启动。这些问题只需要自定义 Docker 镜像，并在 Docker 中启动，就能搞定部署啦。</p>
<h1 id="部署-Vue-项目"><a href="#部署-Vue-项目" class="headerlink" title="部署 Vue 项目"></a>部署 Vue 项目</h1><p>传统的部署一般为编译后放在 Nginx 目录下，或者放在 Tomcat 目录下。玩了有一阵子 Docker 了，就试试用 Docker 来部署吧。</p>
<h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>首先给本地的vue项目打包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>执行命令之后项目根目录下会出现 dist 文件夹，将其上传至服务器。</p>
<h2 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h2><h3 id="编写-Dockerfile"><a href="#编写-Dockerfile" class="headerlink" title="编写 Dockerfile"></a>编写 Dockerfile</h3><p>新建 Dockerfile</p>
<blockquote>
<p>vi Dockerfile</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导入nginx镜像</span><br><span class="line">FROM nginx:1.13.7</span><br><span class="line">MAINTAINER amosannn &lt;amosannn@gmail.com&gt;</span><br><span class="line">#把当前打包工程的html复制到虚拟地址</span><br><span class="line">COPY dist/ /usr/share/nginx/html/</span><br><span class="line">#使用自定义nginx.conf配置端口和监听</span><br><span class="line">RUN rm /etc/nginx/conf.d/default.conf</span><br><span class="line">ADD default.conf /etc/nginx/conf.d/</span><br><span class="line"></span><br><span class="line">RUN /bin/bash -c &#x27;echo init ok!!!&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>新建<code>default.conf</code></p>
<blockquote>
<p>vi default.conf</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"># 项目中定义的端口号</span><br><span class="line">    listen       8000; </span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Docker-打包"><a href="#Docker-打包" class="headerlink" title="Docker 打包"></a>Docker 打包</h3><p>打包前项目目录下应该有这几个文件(夹)：<code>default.conf</code>,<code> dist</code>,<code>Dockerfile</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t zhiliao:v1 .</span><br></pre></td></tr></table></figure>

<p>别忘了末尾的小点点</p>
<p>最后出现这两条提示即为打包成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Successfully built 6f656946fde3</span><br><span class="line">Successfully tagged zhiliao:v1</span><br></pre></td></tr></table></figure>

<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>如果在结果中看到，则为打包成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhiliao             latest              c5d9c47be079        17 minutes ago      111MB</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:8000 zhiliao:v1</span><br></pre></td></tr></table></figure>

<p>命令中的<code>-d</code>意为后台运行</p>
<p>-p 为端口号，前半部分为外网访问的端口，后半部分为 Nginx 反向代理寻找的内部端口</p>
<h3 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure>

<p>这条命令等价于<code>docker container ls</code>，加上 -a 则可显示全部</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_108_54_centos zhiliao-vue]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">bdd5842a4cae        zhiliao:v1          &quot;nginx -g &#x27;daemon ...&quot;   42 seconds ago      Exited (1) 41 seconds ago                       frosty_joliot</span><br></pre></td></tr></table></figure>

<h3 id="查找日志"><a href="#查找日志" class="headerlink" title="查找日志"></a>查找日志</h3><p>如果遇到程序崩溃或者镜像启动失败</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs &#x27;CONTAINER ID&#x27;</span><br></pre></td></tr></table></figure>

<p>使用 ps 命令可以找到到 <code>CONTAINER ID</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_108_54_centos zhiliao-vue]# docker logs bdd5842a4cae</span><br><span class="line">2018/03/28 07:11:51 [emerg] 1#1: unknown directive &quot;//这里使用项目中的端口号&quot; in /etc/nginx/conf.d/default.conf:3</span><br><span class="line">nginx: [emerg] unknown directive &quot;//这里使用项目中的端口号&quot; in /etc/nginx/conf.d/default.conf:3</span><br></pre></td></tr></table></figure>

<hr>
<p>参考链接：</p>
<p><a href="https://yeasy.gitbooks.io/docker_practice/content/image/build.html">使用 Dockerfile 定制镜像</a></p>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>Docker</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Java如何防范XSS攻击</title>
    <url>/blog/2017/05/27/xss/</url>
    <content><![CDATA[<h1 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h1><p>XSS攻击：跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。</p>
<p>XSS是一种经常出现在web应用中的计算机安全漏洞…多的就不说了，<a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC">wiki</a>里写的很清楚。</p>
<h1 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h1><p>我来讲讲我接触到的XSS攻击，容易发生事故的地方就在评论区或问卷提交、注册等等涉及到文本提交操作的步骤中。如果你像我一样是一个勤勤恳恳牢记社会主义核心价值观的少先队员，一定会按问题提示或页面提示输入自然语言。而如果是动了歪脑筋的坏人，他可能会输入这样的信息来恶搞你。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&quot;未满十八岁不得浏览该网站&quot;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>你可能觉得这没什么，但如果他是个超级坏人，提交的不是这种简单的弹窗脚本，而是这样呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;www.hackyou.com/getallpassword.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>惊不惊喜？</p>
<span id="more"></span>
<h1 id="XSS漏洞分类"><a href="#XSS漏洞分类" class="headerlink" title="XSS漏洞分类"></a>XSS漏洞分类</h1><p>XSS通常有两类：</p>
<blockquote>
<ul>
<li>存储型XSS，主要出现在用户输入后会在下个页面显示的表单。例如评论或调查问卷。</li>
<li>反射型XSS，主要表现为将脚本代码添加进URL地址的请求参数中。</li>
</ul>
</blockquote>
<h1 id="如何预防XSS"><a href="#如何预防XSS" class="headerlink" title="如何预防XSS"></a>如何预防XSS</h1><p>在用户的每次提交前进行html转义，将html中的特定符号，如<code>&lt;</code> <code>&gt;</code> <code>&amp;</code> <code>&quot;</code>等分别转换为html转义字符<code>&amp;lt;</code> <code>&amp;gt;</code> <code>&amp;amp;</code> <code>&amp;quot;</code> 。</p>
<p>java转义方法：<br>使用jar包 <code>org.springframework.web.util.HtmlUtils</code>，关于html转义的操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** HTML转义 **/</span>  </span><br><span class="line">String s = HtmlUtils.htmlEscape(<span class="string">&quot;&lt;div&gt;hello world&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&quot;</span>);  </span><br><span class="line">System.out.println(s);  </span><br><span class="line">String s2 = HtmlUtils.htmlUnescape(s);  </span><br><span class="line">System.out.println(s2);  </span><br></pre></td></tr></table></figure>
<p>实例：在调用和数据库连接的DAO方法前，进行转义，例如注册和评论等功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doreview</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Page page)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> oid = Integer.parseInt(request.getParameter(<span class="string">&quot;oid&quot;</span>));</span><br><span class="line">	Order o = orderDAO.get(oid);</span><br><span class="line">	o.setStatus(orderDAO.finish);</span><br><span class="line">	orderDAO.update(o);</span><br><span class="line">	<span class="keyword">int</span> pid = Integer.parseInt(request.getParameter(<span class="string">&quot;pid&quot;</span>));</span><br><span class="line">	Product p = productDAO.get(pid);</span><br><span class="line"></span><br><span class="line">	String content = request.getParameter(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">	content = HtmlUtils.htmlEscape(content);</span><br><span class="line"></span><br><span class="line">	User user = (User) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">	Review review = <span class="keyword">new</span> Review();</span><br><span class="line">	review.setContent(content);</span><br><span class="line">	review.setProduct(p);</span><br><span class="line">	review.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">	review.setUser(user);</span><br><span class="line">	reviewDAO.add(review);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;@forereview?oid=&quot;</span>+oid+<span class="string">&quot;&amp;showonly=true&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相关链接:<br><a href="https://www.zhihu.com/question/19739025">2011年新浪微博XSS事件</a><br><a href="https://gist.github.com/ninehills/1053066">新浪微博XSS攻击代码</a><br><a href="http://tool.oschina.net/commons?type=2">html转义字符对照表</a><br><a href="http://tieba.baidu.com/p/3567794788">简单说下XSS黑站，请注意防范。</a></p>
]]></content>
      <categories>
        <category>技术一路走到黑</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Network Security</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Vue前后端分离跨域问题</title>
    <url>/blog/2018/03/22/solove-vue-cross-domain-problems/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用Vue写了几个页面，发现request传到后端没带上cookies，心想不对劲，Postman明明可以访问啊。再仔细看看，后端已经开放了跨域访问，不需要<code>HttpServletRequest</code>的接口也可以成功请求。一定就是前端请求缺少请求头或是某些参数了。上网查了一下还真是这样，又跳过了一个坑，很开心啦～</p>
<h1 id="前后端跨域设置"><a href="#前后端跨域设置" class="headerlink" title="前后端跨域设置"></a>前后端跨域设置</h1><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><blockquote>
<p>main.js 设置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.defaults.withCredentials=<span class="literal">true</span>;</span><br><span class="line">Vue.prototype.$http = axios;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>请求需带上withCredentials</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$axios.get(<span class="string">&#x27;http://127.0.0.1:8080/xxx/xxxxx&#x27;</span>,&#123;</span><br><span class="line">          <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">withCredentials</span> : <span class="literal">true</span></span><br><span class="line">        &#125;).then( <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>( response.data.code === <span class="string">&#x27;0000&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.items = response.data.data.xxx;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.items)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>加上一个跨域用Interceptor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">      Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">//是否允许浏览器携带用户身份信息（cookie）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>请求源地址如果写了<code>*</code>很可能会被拒绝访问。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Failed to load http://127.0.0.1:8080/zhiliao/login: Response to preflight request doesn&#x27;t pass access control check: The value of the &#x27;Access-Control-Allow-Origin&#x27; header in the response must not be the wildcard &#x27;*&#x27; when the request&#x27;s credentials mode is &#x27;include&#x27;. Origin &#x27;http://127.0.0.1:8000&#x27; is therefore not allowed access. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</span><br></pre></td></tr></table></figure>

<p>如果出现这样的报错，那就得指定地址啦！    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure>

<p>这里依旧有个小坑：指定地址为<code>http://127.0.0.1:8000</code>的时候前端页面若是<code>localhost</code>是无法访问的。</p>
<h1 id="看看axios官方文档"><a href="#看看axios官方文档" class="headerlink" title="看看axios官方文档"></a>看看axios官方文档</h1><p><a href="https://github.com/axios/axios#request-config">axios官方配置说明</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// `timeout` specifies the number of milliseconds before the request times out.</span><br><span class="line">// If the request takes longer than `timeout`, the request will be aborted.</span><br><span class="line">timeout: 1000,</span><br><span class="line"></span><br><span class="line">// `withCredentials` indicates whether or not cross-site Access-Control requests</span><br><span class="line">// should be made using credentials</span><br><span class="line">withCredentials: false, // default</span><br><span class="line"></span><br><span class="line">// `adapter` allows custom handling of requests which makes testing easier.</span><br><span class="line">// Return a promise and supply a valid response (see lib/adapters/README.md).</span><br><span class="line">adapter: function (config) &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>配置文件中<code>withCredentials</code>默认是关闭的，手动修改配置文件或在项目中重定义即可。</p>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>CORS</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis一对一映射注解@One的使用及理解</title>
    <url>/blog/2018/03/08/the-use-and-understanding-of-one-annotated-by-mybatis/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本着更深入地使用注解来开发，慢慢地发现脱离了XML的MyBatis好多好多的坑。我觉得很大的原因还是来自于官方文档的不完善，以及使用注解开发持久层的人并不多见，导致网络上的相关讨论过于贫瘠并重复化，毕竟对于复杂查询的支持，我认为还没有在XML里写一条SQL方便呢～  </p>
<p>所以这篇文章用于补充一语带过的官方文档，记录下自己趟过的坑。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="一对一映射"><a href="#一对一映射" class="headerlink" title="一对一映射"></a>一对一映射</h2><p>注解化一对一映射其实就是将XML中的<code>ResultType</code>属性对应的实体写在<code>@Results</code>注解中。其中的<code>@Result</code>填入实体的属性，而若该属性为实体中的实体，则需要@One注解引入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select answer_id, answer_content, liked_count, create_time, question_id, user_id from answer where create_time &gt; #&#123;createTime&#125; order by liked_count desc, create_time desc limit 0,10&quot;)</span></span><br><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">    @Result(id = true, column = &quot;answer_id&quot;, property = &quot;answerId&quot;, javaType = Integer.class),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;answer_content&quot;, property = &quot;answerContent&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;liked_count&quot;, property = &quot;likedCount&quot;, javaType = Integer.class, jdbcType = JdbcType.INTEGER),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;question_id&quot;, property = &quot;question&quot;, javaType = Question.class,</span></span><br><span class="line"><span class="meta">        one = @One(select = &quot;selectQuestionById&quot;)),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;user_id&quot;, property = &quot;user&quot;,</span></span><br><span class="line"><span class="meta">        one = @One(select = &quot;selectUserById&quot;))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">List&lt;Answer&gt; <span class="title">listAnswerByCreateTime</span><span class="params">(<span class="meta">@Param(&quot;createTime&quot;)</span> <span class="keyword">long</span> createTime)</span></span>;</span><br></pre></td></tr></table></figure>

<p>值得注意的是，映射中的<code>property</code>属性的值不可和其他实体属性一样，应该填写所返回的实体名称。</p>
<p>例如下面代码，我返回的实体为<code>Answer</code>类下的<code>Question</code>类，则<code>property</code>中不可写<code>questionId</code>，而得写<code>question</code>。同时@One中select属性对应的方法若在不同类，则需要写出完整的包名（com.xxx.xxx.getxxxByxx）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Result(column = &quot;question_id&quot;, property = &quot;question&quot;, javaType = Question.class,</span></span><br><span class="line"><span class="meta">        one = @One(select = &quot;selectQuestionById&quot;))</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，从@One传递过来的查询条件也需要在主查询语句中查询出来，也就是上面的<code>listAnswerByCreateTime</code>方法需要查询出question_id和user_id，千万别漏了。否则报你错哦！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select question_id, question_title from question where question_id = #&#123;questionId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResultType(Question.class)</span></span><br><span class="line"><span class="function">Question <span class="title">selectQuestionById</span><span class="params">(<span class="meta">@Param(&quot;questionId&quot;)</span> Integer questionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select user_id, username, avatar_url, simple_desc from user where user_id = #&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResultType(User.class)</span></span><br><span class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Integer userId)</span></span>;</span><br></pre></td></tr></table></figure>



<p>由此查询得出的结果集为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;answerList&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;answerId&quot;</span>: <span class="number">42</span>,</span><br><span class="line">                <span class="attr">&quot;answerContent&quot;</span>: <span class="string">&quot;这是回答！&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;likedCount&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span>: <span class="number">1520508016650</span>,</span><br><span class="line">                <span class="attr">&quot;userId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;questionId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;likeState&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;commentCount&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;question&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;questionId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;questionTitle&quot;</span>: <span class="string">&quot;Spring，Django，Rails，Express这些框架技术的出现都是为了解决什么问题，现在这些框架都应用在哪些方面？&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;createTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">&quot;userId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">&quot;user&quot;</span>: <span class="literal">null</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;userId&quot;</span>: <span class="number">11218</span>,</span><br><span class="line">                    <span class="attr">&quot;weiboUserId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">&quot;email&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;amosamos&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;password&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">&quot;joinTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">&quot;avatarUrl&quot;</span>: <span class="string">&quot;https://avatars3.githubusercontent.com/u/16012509?s=400&amp;u=6fe0dd08943216aeff2d3c9d1b8c3e602f6de8e9&amp;v=4&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;answerCommentList&quot;</span>: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
</search>
